{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Clumper \u00b6 A small library that can clump sequences of data together. Part of a video series on calmcode.io . Features \u00b6 This library only has optional dependencies. Just a modern version of python gives you 99% of the features. The library offers a pattern of verbs that are very expressive. You can write code from top to bottom, left to right. You can read in many json / yaml / csv files at once by using a wildcard * . You can directly read data from a web-endpoint. MIT License Installation \u00b6 You can install this package via pip . pip install clumper It may be safer however to install via; python -m pip install clumper For details on why, check out this resource . Contributing \u00b6 Make sure you check out the issue list beforehand. New features should be discussed first and we also want to prevent that two people are working on the same thing. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:koaning/clumper.git cd clumper make install-dev Bugs \u00b6 If you encounter a bug, we'd love to hear about it! We would appreciate though if you could add a reproducible example when you submit an issue on github . We've included some methods to our library to make this relatively easy. Here's an example of a reproducible code-block. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }] clump = Clumper ( data ) expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected ) Note how this block uses .equals() to demonstrate what the expected output is. This is great for maintainers because they can just copy the code and work on a fix. Origin Stories \u00b6 Why the name? \u00b6 Sometimes you just want something to \"clump\" together in the right way. So we turned the word \"clump\" into a verb and into a python package. How did it get started? \u00b6 The origin of this package was educational. It got started as free educational content on calmcode.io to demonstrate how to make your own package. If you're interested in learning how this package got made you can watch a small documented series of the lessons learned.","title":"Index"},{"location":"index.html#clumper","text":"A small library that can clump sequences of data together. Part of a video series on calmcode.io .","title":"Clumper"},{"location":"index.html#features","text":"This library only has optional dependencies. Just a modern version of python gives you 99% of the features. The library offers a pattern of verbs that are very expressive. You can write code from top to bottom, left to right. You can read in many json / yaml / csv files at once by using a wildcard * . You can directly read data from a web-endpoint. MIT License","title":"Features"},{"location":"index.html#installation","text":"You can install this package via pip . pip install clumper It may be safer however to install via; python -m pip install clumper For details on why, check out this resource .","title":"Installation"},{"location":"index.html#contributing","text":"Make sure you check out the issue list beforehand. New features should be discussed first and we also want to prevent that two people are working on the same thing. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:koaning/clumper.git cd clumper make install-dev","title":"Contributing"},{"location":"index.html#bugs","text":"If you encounter a bug, we'd love to hear about it! We would appreciate though if you could add a reproducible example when you submit an issue on github . We've included some methods to our library to make this relatively easy. Here's an example of a reproducible code-block. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }] clump = Clumper ( data ) expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected ) Note how this block uses .equals() to demonstrate what the expected output is. This is great for maintainers because they can just copy the code and work on a fix.","title":"Bugs"},{"location":"index.html#origin-stories","text":"","title":"Origin Stories"},{"location":"index.html#why-the-name","text":"Sometimes you just want something to \"clump\" together in the right way. So we turned the word \"clump\" into a verb and into a python package.","title":"Why the name?"},{"location":"index.html#how-did-it-get-started","text":"The origin of this package was educational. It got started as free educational content on calmcode.io to demonstrate how to make your own package. If you're interested in learning how this package got made you can watch a small documented series of the lessons learned.","title":"How did it get started?"},{"location":"api/clumper.html","text":"Clumper \u00b6 This object adds methods to a list of dictionaries that make it nicer to explore. Parameters Name Type Description Default blob the list of data to turn into a Clumper required groups specify any groups you'd like to attach to the Clumper () listify if the input is a dictionary, turn it into a list with one dictionary inside beforehand. True Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts ) assert len ( c ) == 4 agg ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 @dict_collection_only @grouped def agg ( self , ** kwargs ): \"\"\" Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: 1. the name of the new key 2. the key you'd like to summarise (first item in the tuple) 3. the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `values`, `var`, `std`, `first` or `last`. ![](../img/split-apply-combine.png) Warning: This method is aware of groups. There may be different results if a group is active. Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 3} ] (Clumper(list_dicts) .agg(mean_a=('a', 'mean'), min_b=('b', 'min'), max_b=('b', 'max')) .collect()) another_list_dicts = [ {'a': 1, 'c': 'a'}, {'a': 2, 'c': 'b'}, {'a': 3, 'c': 'a'} ] (Clumper(another_list_dicts) .group_by('c') .agg(mean_a=('a', 'mean'), uniq_a=('a', 'unique')) .collect()) ``` Advanced Usage: You can also supply this verb your own functions if you'd like. ```python from clumper import Clumper data = [ {\"a\": 7, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", sum), u=(\"a\", lambda x: set(x)))) expected = [ {'a': 7, 'grp': 'a', 's': 19, 'u': {5, 7}}, {'a': 7, 'grp': 'a', 's': 19, 'u': {5, 7}}, {'a': 5, 'grp': 'a', 's': 19, 'u': {5, 7}}, {'a': 2, 'grp': 'b', 's': 11, 'u': {2, 9}}, {'a': 9, 'grp': 'b', 's': 11, 'u': {2, 9}} ] assert tfm_clump.equals(expected) ``` \"\"\" res = { name : self . summarise_col ( func_str , col ) for name , ( col , func_str ) in kwargs . items () } return Clumper ([ res ], groups = self . groups ) Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , values , var , std , first or last . Warning This method is aware of groups. There may be different results if a group is active. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) Advanced Usage: You can also supply this verb your own functions if you'd like. from clumper import Clumper data = [ { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : set ( x )))) expected = [ { 'a' : 7 , 'grp' : 'a' , 's' : 19 , 'u' : { 5 , 7 }}, { 'a' : 7 , 'grp' : 'a' , 's' : 19 , 'u' : { 5 , 7 }}, { 'a' : 5 , 'grp' : 'a' , 's' : 19 , 'u' : { 5 , 7 }}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : { 2 , 9 }}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : { 2 , 9 }} ] assert tfm_clump . equals ( expected ) collect ( self ) \u00b6 Show source code in clumper/clump.py 1332 1333 1334 1335 1336 1337 1338 def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](../img/collect.png) \"\"\" return self . blob Returns a list instead of a Clumper object. concat ( self , * other ) \u00b6 Show source code in clumper/clump.py 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 def concat ( self , * other ): \"\"\" Concatenate two or more `Clumper` objects together. ![](../img/concat.png) ```python from clumper import Clumper c1 = Clumper([{\"a\": 1}]) c2 = Clumper([{\"a\": 2}]) c3 = Clumper([{\"a\": 3}]) assert len(c1.concat(c2)) == 2 assert len(c1.concat(c2, c3)) == 3 assert len(c1.concat(c2).concat(c3)) == 3 ``` \"\"\" data = reduce ( lambda a , b : a + b , [ o . blob for o in other ]) return self . _create_new ( self . blob + data ) Concatenate two or more Clumper objects together. from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3 copy ( self ) \u00b6 Show source code in clumper/clump.py 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 def copy ( self ): \"\"\" Makes a copy of the collection. ![](../img/copy.png) Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] c1 = Clumper(list_dicts) c2 = c1.copy() assert id(c1) != id(c2) ``` \"\"\" return self . _create_new ([ d for d in self . blob ]) Makes a copy of the collection. Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] c1 = Clumper ( list_dicts ) c2 = c1 . copy () assert id ( c1 ) != id ( c2 ) count ( self , col ) \u00b6 Show source code in clumper/clump.py 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 @dict_collection_only @return_value_if_empty ( value = 0 ) def count ( self , col ): \"\"\" Counts how often a key appears in the collection. ![](../img/count.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).count(\"a\") == 4 assert Clumper(list_of_dicts).count(\"b\") == 3 ``` \"\"\" return self . summarise_col ( \"count\" , col ) Counts how often a key appears in the collection. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . count ( \"a\" ) == 4 assert Clumper ( list_of_dicts ) . count ( \"b\" ) == 3 drop ( self , * keys ) \u00b6 Show source code in clumper/clump.py 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 @dict_collection_only def drop ( self , * keys ): \"\"\" Removes a subset of keys from each item in the collection. ![](../img/drop.png) Arguments: keys: the keys to remove Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).drop('c') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ( [{ k : v for k , v in d . items () if k not in keys } for d in self . blob ] ) Removes a subset of keys from each item in the collection. Parameters Name Type Description Default *keys the keys to remove () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ]) drop_duplicates ( self ) \u00b6 Show source code in clumper/clump.py 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 def drop_duplicates ( self ): \"\"\" Iterates over all elements to remove duplicates. ![](../img/drop_duplicates.png) Usage: ```python from clumper import Clumper data = [{\"a\": 1}, {\"a\": 2}, {\"a\": 2}] clump = Clumper(data).drop_duplicates() expected = [{\"a\": 1}, {\"a\": 2}] assert clump.equals(expected) ``` \"\"\" uniques = [] for d in self : if d not in uniques : uniques . append ( d ) return self . _create_new ( uniques ) Iterates over all elements to remove duplicates. Usage: from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected ) equals ( self , data ) \u00b6 Show source code in clumper/clump.py 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 def equals ( self , data ): \"\"\" Compares the collection of items with a list. Returns `True` if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. ![](../img/equals.png) Arguments: data: a list of that to compare against Usage: ```python from clumper import Clumper data = [{\"a\": 1}] clump = Clumper(data) assert clump.equals(data) assert not clump.equals([{\"b\":1}]) ``` \"\"\" for i in self : if i not in data : return False for i in data : if i not in self : return False return True Compares the collection of items with a list. Returns True if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. Parameters Name Type Description Default data a list of that to compare against required Usage: from clumper import Clumper data = [{ \"a\" : 1 }] clump = Clumper ( data ) assert clump . equals ( data ) assert not clump . equals ([{ \"b\" : 1 }]) explode ( self , * to_explode , ** kwargs ) \u00b6 Show source code in clumper/clump.py 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 @dict_collection_only def explode ( self , * to_explode , ** kwargs ): \"\"\" Turns a list in an item into multiple items. The opposite of `.implode()`. ![](../img/explode.png) Arguments: to_explode: keys to explode, will keep the same name kwargs: (new name, keys to explode)-pairs Usage: ```python from clumper import Clumper data = [{'a': 1, 'items': [1, 2]}] clumper = Clumper(data).explode(\"items\") expected = [{'a': 1, 'items': 1}, {'a': 1, 'items': 2}] assert clumper.equals(expected) clumper = Clumper(data).explode(item=\"items\") expected = [{'a': 1, 'item': 1}, {'a': 1, 'item': 2}] assert clumper.equals(expected) ``` \"\"\" # you can keep the same name by just using *args or overwrite using **kwargs kwargs = { ** kwargs , ** { k : k for k in to_explode }} new_name , to_explode = kwargs . keys (), kwargs . values () res = [] for d in self . blob : combinations = it . product ( * [ d [ v ] for v in to_explode ]) for comb in combinations : new_dict = d . copy () for k , v in zip ( new_name , comb ): new_dict [ k ] = v res . append ( new_dict ) return self . _create_new ( res ) . drop ( * [ k for k in to_explode if k not in new_name ]) Turns a list in an item into multiple items. The opposite of .implode() . Parameters Name Type Description Default *to_explode keys to explode, will keep the same name () **kwargs (new name, keys to explode)-pairs {} Usage: from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) expected = [{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }] assert clumper . equals ( expected ) clumper = Clumper ( data ) . explode ( item = \"items\" ) expected = [{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }] assert clumper . equals ( expected ) flatten_keys ( self , keyname = 'key' ) \u00b6 Show source code in clumper/clump.py 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 def flatten_keys ( self , keyname = \"key\" ): \"\"\" Flattens the keys in the data. Useful when `Clumper` is created with a single large dictionary. ![](../img/flatten_keys.png) Arguments: keyname: the name of the new key Usage: ```python from clumper import Clumper data = { 'feature_1': {'propery_1': 1, 'property_2': 2}, 'feature_2': {'propery_1': 3, 'property_2': 4}, 'feature_3': {'propery_1': 5, 'property_2': 6}, } expected = [ {'propery_1': 1, 'property_2': 2, 'key': 'feature_1'}, {'propery_1': 3, 'property_2': 4, 'key': 'feature_2'}, {'propery_1': 5, 'property_2': 6, 'key': 'feature_3'} ] assert Clumper(data, listify=False).flatten_keys().collect() == expected ``` \"\"\" return self . _create_new ([{ ** v , keyname : k } for k , v in self . blob . items ()]) Flattens the keys in the data. Useful when Clumper is created with a single large dictionary. Parameters Name Type Description Default keyname the name of the new key 'key' Usage: from clumper import Clumper data = { 'feature_1' : { 'propery_1' : 1 , 'property_2' : 2 }, 'feature_2' : { 'propery_1' : 3 , 'property_2' : 4 }, 'feature_3' : { 'propery_1' : 5 , 'property_2' : 6 }, } expected = [ { 'propery_1' : 1 , 'property_2' : 2 , 'key' : 'feature_1' }, { 'propery_1' : 3 , 'property_2' : 4 , 'key' : 'feature_2' }, { 'propery_1' : 5 , 'property_2' : 6 , 'key' : 'feature_3' } ] assert Clumper ( data , listify = False ) . flatten_keys () . collect () == expected group_by ( self , * cols ) \u00b6 Show source code in clumper/clump.py 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 def group_by ( self , * cols ): \"\"\" Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with `.ungroup()`. ![](../img/groupby.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) ``` \"\"\" self . groups = cols return self Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with .ungroup() . from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) head ( self , n = 5 ) \u00b6 Show source code in clumper/clump.py 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](../img/head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).head(2) expected = [{'a': 1}, {'a': 2}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ([ self . blob [ i ] for i in range ( n )]) Selects the top n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . head ( 2 ) expected = [{ 'a' : 1 }, { 'a' : 2 }] assert result . equals ( expected ) inner_join ( self , other , mapping , lsuffix = '' , rsuffix = '_joined' ) \u00b6 Show source code in clumper/clump.py 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 @dict_collection_only def inner_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs an inner join on two collections. ![](../img/inner_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\":4}, {\"a\": 2, \"b\":6}, {\"a\": 3, \"b\":8}, ]) right = Clumper([ {\"c\": 9, \"b\":4}, {\"c\": 8, \"b\":5}, {\"c\": 7, \"b\":6}, ]) result = left.inner_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) return self . _create_new ( result ) Performs an inner join on two collections. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected ) keep ( self , * funcs ) \u00b6 Show source code in clumper/clump.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](../img/keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] clump = Clumper(list_dicts).keep(lambda d: d['a'] >= 3) expected = [{'a': 3}, {'a': 4}] assert clump.equals(expected) ``` \"\"\" data = self . blob . copy () for func in funcs : data = [ d for d in data if func ( d )] return self . _create_new ( data ) Allows you to select which items to keep and which items to remove. Parameters Name Type Description Default *funcs functions that indicate which items to keep () Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected ) keys ( self , overlap = False ) \u00b6 Show source code in clumper/clump.py 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 @dict_collection_only def keys ( self , overlap = False ): \"\"\" Returns all the keys of all the items in the collection. ![](../img/keys.png) Arguments: overlap: if `True` only return the keys that overlap in each set Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 2}, {'a': 2, 'c': 3}] assert set(Clumper(data).keys(overlap=True)) == {'a'} assert set(Clumper(data).keys(overlap=False)) == {'a', 'b', 'c'} ``` \"\"\" if overlap : all_keys = [ set ( d . keys ()) for d in self ] return list ( reduce ( lambda a , b : a . intersection ( b ), all_keys )) return list ({ k for d in self for k in d . keys ()}) Returns all the keys of all the items in the collection. Parameters Name Type Description Default overlap if True only return the keys that overlap in each set False Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'c' : 3 }] assert set ( Clumper ( data ) . keys ( overlap = True )) == { 'a' } assert set ( Clumper ( data ) . keys ( overlap = False )) == { 'a' , 'b' , 'c' } left_join ( self , other , mapping , lsuffix = '' , rsuffix = '_joined' ) \u00b6 Show source code in clumper/clump.py 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 @dict_collection_only def left_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. ![](../img/left_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\": 4}, {\"a\": 2, \"b\": 6}, {\"a\": 3, \"b\": 8}, ]) right = Clumper([ {\"c\": 9, \"b\": 4}, {\"c\": 8, \"b\": 5}, {\"c\": 7, \"b\": 6}, ]) result = left.left_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, {\"a\": 3, \"b\": 8}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] d_i_added = False for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) d_i_added = True if not d_i_added : result . append ( d_i ) return self . _create_new ( result ) Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected ) map ( self , func ) \u00b6 Show source code in clumper/clump.py 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 def map ( self , func ): \"\"\" Directly map one item to another one using a function. If you're dealing with dictionaries, consider using `mutate` instead. ![](../img/map.png) Arguments: func: the function that will map each item Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}] (Clumper(list_dicts) .map(lambda d: {'a': d['a'], 'b': 1}) .collect()) ``` \"\"\" return self . _create_new ([ func ( d ) for d in self . blob ]) Directly map one item to another one using a function. If you're dealing with dictionaries, consider using mutate instead. Parameters Name Type Description Default func the function that will map each item required Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }] ( Clumper ( list_dicts ) . map ( lambda d : { 'a' : d [ 'a' ], 'b' : 1 }) . collect ()) max ( self , col ) \u00b6 Show source code in clumper/clump.py 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 @dict_collection_only @return_value_if_empty ( value = None ) def max ( self , col ): \"\"\" Returns maximum value that a key has. ![](../img/max.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).max(\"a\") == 7 assert Clumper(list_of_dicts).max(\"b\") == 7 ``` \"\"\" return self . summarise_col ( \"max\" , col ) Returns maximum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . max ( \"a\" ) == 7 assert Clumper ( list_of_dicts ) . max ( \"b\" ) == 7 mean ( self , col ) \u00b6 Show source code in clumper/clump.py 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 @dict_collection_only @return_value_if_empty ( value = None ) def mean ( self , col ): \"\"\" Give the mean of the values that belong to a key. ![](../img/mean.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert round(Clumper(list_of_dicts).mean(\"a\"), 1) == 3.5 assert round(Clumper(list_of_dicts).mean(\"b\"), 1) == 6.7 ``` \"\"\" return self . summarise_col ( \"mean\" , col ) Give the mean of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert round ( Clumper ( list_of_dicts ) . mean ( \"a\" ), 1 ) == 3.5 assert round ( Clumper ( list_of_dicts ) . mean ( \"b\" ), 1 ) == 6.7 min ( self , col ) \u00b6 Show source code in clumper/clump.py 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 @dict_collection_only @return_value_if_empty ( value = None ) def min ( self , col ): \"\"\" Returns minimum value that a key has. ![](../img/min.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).min(\"a\") == 2 assert Clumper(list_of_dicts).min(\"b\") == 6 ``` \"\"\" return self . summarise_col ( \"min\" , col ) Returns minimum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . min ( \"a\" ) == 2 assert Clumper ( list_of_dicts ) . min ( \"b\" ) == 6 mutate ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 @grouped def mutate ( self , ** kwargs ): \"\"\" Adds or overrides key-value pairs in the collection of dictionaries. ![](../img/mutate.png) Arguments: kwargs: keyword arguments of keyname/function-pairs Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] result = (Clumper(list_dicts) .mutate(c=lambda d: d['a'] + d['b'], s=lambda d: d['a'] + d['b'] + d['c'])) expected = [ {'a': 1, 'b': 2, 'c': 3, 's': 6}, {'a': 2, 'b': 3, 'c': 5, 's': 10}, {'a': 1, 'b': 6, 'c': 7, 's': 14} ] assert result.equals(expected) ``` \"\"\" data = [] for d in self . blob . copy (): new = { k : v for k , v in d . items ()} for key , func in kwargs . items (): new [ key ] = func ( new ) data . append ( new ) return self . _create_new ( data ) Adds or overrides key-value pairs in the collection of dictionaries. Parameters Name Type Description Default **kwargs keyword arguments of keyname/function-pairs {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected ) n_unique ( self , col ) \u00b6 Show source code in clumper/clump.py 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 @dict_collection_only @return_value_if_empty ( value = 0 ) def n_unique ( self , col ): \"\"\" Returns number of unique values that a key has. ![](../img/nunique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).n_unique(\"a\") == 3 assert Clumper(list_of_dicts).n_unique(\"b\") == 2 ``` \"\"\" return self . summarise_col ( \"n_unique\" , col ) Returns number of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . n_unique ( \"a\" ) == 3 assert Clumper ( list_of_dicts ) . n_unique ( \"b\" ) == 2 pipe ( self , func , * args , ** kwargs ) \u00b6 Show source code in clumper/clump.py 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 def pipe ( self , func , * args , ** kwargs ): \"\"\" Applies a function to the `Clumper` object in a chain-able manner. ![](../img/pipe.png) Arguments: func: function to apply args: arguments that will be passed to the function kwargs: keyword-arguments that will be passed to the function Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] def remove_outliers(clump, min_a, max_a): return (clump .keep(lambda d: d['a'] >= min_a, lambda d: d['a'] <= max_a)) result = Clumper(list_dicts).pipe(remove_outliers, min_a=10, max_a=90) assert len(result) == 81 ``` \"\"\" return func ( self , * args , ** kwargs ) Applies a function to the Clumper object in a chain-able manner. Parameters Name Type Description Default func function to apply required *args arguments that will be passed to the function () **kwargs keyword-arguments that will be passed to the function {} Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] def remove_outliers ( clump , min_a , max_a ): return ( clump . keep ( lambda d : d [ 'a' ] >= min_a , lambda d : d [ 'a' ] <= max_a )) result = Clumper ( list_dicts ) . pipe ( remove_outliers , min_a = 10 , max_a = 90 ) assert len ( result ) == 81 read_csv ( path , delimiter = ',' , na_values = None , dtype = None , fieldnames = None , n = None , add_path = False ) (classmethod) \u00b6 Show source code in clumper/clump.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 @classmethod @multifile () def read_csv ( cls , path , delimiter = \",\" , na_values = None , dtype = None , fieldnames = None , n = None , add_path = False , ): \"\"\" Reads in a csv file. Can also read files from url. ![](../img/read_csv.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. delimiter: Delimiter used in the csv file. Must be a single character and `,` is the default. n: Number of rows to read in. Useful when reading large files. If `None`, all rows are read. fieldnames: Allows you to set the fieldnames if the header is missing. By default, the first row of the csv will provide the Clumper keys if fieldnames is `None`. If fieldnames is provided, then the first row becomes part of the data. You should ensure that the correct number of fieldnames is supplied, as an incorrect number can lead to an irregular outcome. If the row has seven fields and the number of fields in fieldnames length is 3, then every row will have only 3 values, the remaining four will be lumped into a list, and assigned key `None`. If the rows have fewer fields than fieldnames, then the missing values are filled in with `None`. na_values: This provides an option for treating null values. If `ignore`, null values are returned as empty strings (\"\"). If `None`, then for each row, the key,value pair with the null values will be truncated from the row. The only values treated as null are empty strings(\"\") and \"NA\". add_path: Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. dtype: Data type for each value in a key:value pair. If `None`, then values will be read in as strings. Available dtypes are (int, float, str). If a single dtype is passed, then all values will be converted to the data type and raise an error, if not applicable. For different data types for different key, value pairs, a dictionary of {key: data_type} passed to dtype argument will change the value for every key with the data type, and raise an error if not applicable. Usage: ```python from clumper import Clumper clump = Clumper.read_csv(\"tests/data/monopoly.csv\") assert len(clump) == 22 clump = Clumper.read_csv(\"tests/data/monopoly.csv\", n = 10) assert len(clump) == 10 clump = Clumper.read_csv(\"https://calmcode.io/datasets/monopoly.csv\") assert len(clump) == 22 # If the fieldnames argument is not None, then the first row becomes part of the data. fieldnames = ['date', 'currency', 'country', 'price', 'dollar_rate', 'cost'] clump = Clumper.read_csv(\"https://calmcode.io/datasets/bigmac.csv\", fieldnames=fieldnames) first_row = ['date', 'currency_code','name','local_price', 'dollar_ex', 'dollar_price'] assert clump.head(1).equals([dict(zip(fieldnames, first_row))]) ``` \"\"\" if n is not None : if n <= 0 : raise ValueError ( \"Number of lines to read must be > 0.\" ) # conveniently excludes pathlib files here and removes # the need to write code to check pathlib files in other places. # Quick conversion in case of Path object path = str ( path ) if path . startswith (( \"https:\" , \"http:\" )): with urllib . request . urlopen ( path ) as resp : if fieldnames is None : fieldnames = resp . readline () . decode () . strip () . split ( \",\" ) # This section allows us to chunk the rows, if nrows is supplied. body = it . islice ( resp , 0 , n ) body = ( word . decode () . strip () . split ( \",\" ) for word in body ) body = it . product ([ fieldnames ], body ) result = [ dict ( zip ( key , values )) for key , values in body ] else : with open ( path , newline = \"\" ) as csvfile : reader = csv . DictReader ( csvfile , delimiter = delimiter , fieldnames = fieldnames ) # python version less than 3.8 returns an OrderedDict result = [ dict ( entry ) for entry in it . islice ( reader , 0 , n )] # Null values, same as missing keys. # If there are null values/missing keys, they will be truncated from the dictionary. # Python's csv module treats null values as empty strings when writing to a csv - # https://docs.python.org/3.8/library/csv.html#csv.DictWriter. # The user can choose to explicitly show missing keys/null values in the dictionary, # by assigning `ignore` to the na_values argument. At the moment, the default for # null values are empty string (\"\") and \"NA\". if na_values == \"ignore\" : result = result else : na_values = [ \"\" , \"NA\" ] result = [ { key : value for key , value in entry . items () if value not in na_values } for entry in result ] # The csv module reads every row as a string, there are no data type assumptions. # This function attempts to solve this. The user can pass a string of either # ('int', 'str', 'float') or if the user knows the keys/fieldnames, can pass a # dictionary mapping the key to the data type. # Technically 'str' data type is not needed, since data is read in as strings anyway. if not ( isinstance ( dtype , ( dict , str )) or dtype is None ): raise TypeError ( \"\"\"dtype should be a dictionary pair of key and data type, or a single string data type\"\"\" ) dtype_mapping = { \"int\" : int , \"float\" : float , \"str\" : str } if dtype : if isinstance ( dtype , str ) and dtype in ( \"int\" , \"float\" , \"str\" ): result = [ { key : dtype_mapping [ dtype ]( value ) for key , value in entry . items ()} for entry in result ] else : result = [ { key : dtype_mapping [ dtype [ key ]]( value ) if key in dtype else value for key , value in entry . items () } for entry in result ] if add_path : return Clumper ( result ) . mutate ( read_path = lambda d : path ) return Clumper ( result ) Reads in a csv file. Can also read files from url. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required delimiter Delimiter used in the csv file. Must be a single character and , is the default. ',' n Number of rows to read in. Useful when reading large files. If None , all rows are read. None fieldnames Allows you to set the fieldnames if the header is missing. By default, the first row of the csv will provide the Clumper keys if fieldnames is None . If fieldnames is provided, then the first row becomes part of the data. You should ensure that the correct number of fieldnames is supplied, as an incorrect number can lead to an irregular outcome. If the row has seven fields and the number of fields in fieldnames length is 3, then every row will have only 3 values, the remaining four will be lumped into a list, and assigned key None . If the rows have fewer fields than fieldnames, then the missing values are filled in with None . None na_values This provides an option for treating null values. If ignore , null values are returned as empty strings (\"\"). If None , then for each row, the key,value pair with the null values will be truncated from the row. The only values treated as null are empty strings(\"\") and \"NA\". None add_path Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False dtype Data type for each value in a key:value pair. If None , then values will be read in as strings. Available dtypes are (int, float, str). If a single dtype is passed, then all values will be converted to the data type and raise an error, if not applicable. For different data types for different key, value pairs, a dictionary of {key: data_type} passed to dtype argument will change the value for every key with the data type, and raise an error if not applicable. None Usage: from clumper import Clumper clump = Clumper . read_csv ( \"tests/data/monopoly.csv\" ) assert len ( clump ) == 22 clump = Clumper . read_csv ( \"tests/data/monopoly.csv\" , n = 10 ) assert len ( clump ) == 10 clump = Clumper . read_csv ( \"https://calmcode.io/datasets/monopoly.csv\" ) assert len ( clump ) == 22 # If the fieldnames argument is not None, then the first row becomes part of the data. fieldnames = [ 'date' , 'currency' , 'country' , 'price' , 'dollar_rate' , 'cost' ] clump = Clumper . read_csv ( \"https://calmcode.io/datasets/bigmac.csv\" , fieldnames = fieldnames ) first_row = [ 'date' , 'currency_code' , 'name' , 'local_price' , 'dollar_ex' , 'dollar_price' ] assert clump . head ( 1 ) . equals ([ dict ( zip ( fieldnames , first_row ))]) read_json ( path , n = None , listify = True , add_path = False ) (classmethod) \u00b6 Show source code in clumper/clump.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 @classmethod @multifile () def read_json ( cls , path , n = None , listify = True , add_path = False ): \"\"\" Reads in a json file. Can also read files from url. ![](../img/read_json.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. n: Number of rows to read in. Useful when reading large files. If `None`, all rows are read. listify: if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. add_path: Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. Usage: ```python from clumper import Clumper clump = Clumper.read_json(\"tests/data/pokemon.json\") assert len(clump) == 800 clump = Clumper.read_json(\"https://calmcode.io/datasets/got.json\") assert len(clump) == 30 clump = Clumper.read_json(\"https://calmcode.io/datasets/got.json\", n=10) assert len(clump) == 10 ``` \"\"\" if n is not None : if n <= 0 : raise ValueError ( \"Number of lines to read must be > 0.\" ) # Quick conversion in case of Path object path = str ( path ) if path . startswith ( \"https:\" ) or path . startswith ( \"http:\" ): with urllib . request . urlopen ( path ) as resp : data = json . loads ( resp . read ()) else : data = json . loads ( pathlib . Path ( path ) . read_text ()) if add_path : if isinstance ( data , dict ): data [ \"read_path\" ] = path if isinstance ( data , list ): for d in data : d [ \"read_path\" ] = path if n : return Clumper ( list ( it . islice ( data , 0 , n ))) return Clumper ( data , listify = listify ) Reads in a json file. Can also read files from url. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required n Number of rows to read in. Useful when reading large files. If None , all rows are read. None listify if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. True add_path Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False Usage: from clumper import Clumper clump = Clumper . read_json ( \"tests/data/pokemon.json\" ) assert len ( clump ) == 800 clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) assert len ( clump ) == 30 clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" , n = 10 ) assert len ( clump ) == 10 read_jsonl ( path , n = None , listify = True , add_path = False ) (classmethod) \u00b6 Show source code in clumper/clump.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 @classmethod @multifile () def read_jsonl ( cls , path , n = None , listify = True , add_path = False ): \"\"\" Reads in a jsonl file. Can also read files from url. ![](../img/read_jsonl.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. n: Number of rows to read in. Useful when reading large files. If `None`, all rows are read. listify: if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. add_path: Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. Usage: ```python from clumper import Clumper clump = Clumper.read_jsonl(\"tests/data/cards.jsonl\") assert len(clump) == 4 clump = Clumper.read_jsonl(\"https://calmcode.io/datasets/pokemon.jsonl\") assert len(clump) == 800 clump = Clumper.read_jsonl(\"https://calmcode.io/datasets/pokemon.jsonl\", n=10) assert len(clump) == 10 ``` \"\"\" if n is not None : if n <= 0 : raise ValueError ( \"Number of lines to read must be > 0.\" ) # Quick conversion in case of Path object path = str ( path ) # Case 1 : Open cloud file in stream if path . startswith ( \"https:\" ) or path . startswith ( \"http:\" ): f = urllib . request . urlopen ( path ) # Case 2 : Local file else : f = open ( path ) # Initialize a place to store the parsed data as list data_array = [] # Read it, parse and close it with f : for current_line_nr , json_string in enumerate ( f ): if n is not None and current_line_nr == n : break json_object = json . loads ( json_string ) data_array . append ( json_object ) if add_path : for d in data_array : d [ \"read_path\" ] = path # Return it return Clumper ( data_array , listify = listify ) Reads in a jsonl file. Can also read files from url. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required n Number of rows to read in. Useful when reading large files. If None , all rows are read. None listify if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. True add_path Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False Usage: from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/cards.jsonl\" ) assert len ( clump ) == 4 clump = Clumper . read_jsonl ( \"https://calmcode.io/datasets/pokemon.jsonl\" ) assert len ( clump ) == 800 clump = Clumper . read_jsonl ( \"https://calmcode.io/datasets/pokemon.jsonl\" , n = 10 ) assert len ( clump ) == 10 read_yaml ( path , n = None , listify = True , add_path = False ) (classmethod) \u00b6 Show source code in clumper/clump.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 @classmethod @multifile () def read_yaml ( cls , path , n = None , listify = True , add_path = False ): \"\"\" Reads in a yaml file. ![](../img/read_yaml.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. n: number of lines to read in, if `None` will read all listify: if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. add_path: Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. Important: This method requires the `PyYAML` dependency which is not installed automatically. To install it you can run; ``` # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] ``` Usage: ```python from clumper import Clumper clump = Clumper.read_yaml(\"tests/data/demo-flat-1.yaml\") assert len(clump) == 3 clump = Clumper.read_yaml(\"tests/data/demo-flat-*.yaml\") assert len(clump) == 6 ``` \"\"\" # Quick conversion in case of Path object path = str ( path ) # Case 1 : Open cloud file in stream if path . startswith (( \"https:\" , \"http:\" )): f = urllib . request . urlopen ( path ) # Case 2 : Local file else : f = open ( path ) # Try to load it but tell the user to install if not there. try : import yaml data = yaml . load ( f . read (), Loader = yaml . FullLoader ) if isinstance ( data , dict ): if add_path : data [ \"read_path\" ] = path return Clumper ( data , listify = listify ) if add_path : for d in data : d [ \"read_path\" ] = path if n : return Clumper ( list ( it . islice ( data , 0 , n )), listify = listify ) return Clumper ( data , listify = listify ) except ImportError : raise_yaml_dep_error () Reads in a yaml file. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required n number of lines to read in, if None will read all None listify if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. True add_path Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False Important This method requires the PyYAML dependency which is not installed automatically. To install it you can run; # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] Usage: from clumper import Clumper clump = Clumper . read_yaml ( \"tests/data/demo-flat-1.yaml\" ) assert len ( clump ) == 3 clump = Clumper . read_yaml ( \"tests/data/demo-flat-*.yaml\" ) assert len ( clump ) == 6 reduce ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 def reduce ( self , ** kwargs ): \"\"\" Reduce the collection using reducing functions. ![](../img/reduce.png) Arguments: kwargs: key-function pairs Usage: ```python from clumper import Clumper list_ints = [1, 2, 3, 4, 5] (Clumper(list_ints) .reduce(sum_a = lambda x,y: x + y, min_a = lambda x,y: min(x, y), max_a = lambda x,y: max(x, y)) .collect()) ``` \"\"\" return self . _create_new ( [{ k : reduce ( func , [ b for b in self . blob ]) for k , func in kwargs . items ()}] ) Reduce the collection using reducing functions. Parameters Name Type Description Default **kwargs key-function pairs {} Usage: from clumper import Clumper list_ints = [ 1 , 2 , 3 , 4 , 5 ] ( Clumper ( list_ints ) . reduce ( sum_a = lambda x , y : x + y , min_a = lambda x , y : min ( x , y ), max_a = lambda x , y : max ( x , y )) . collect ()) rename ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 def rename ( self , ** kwargs ): \"\"\" Rename items in the collection. Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 3}, {'a': 2, 'b': 4}] clumper = Clumper(data).rename(c=\"b\") expected = [{'a': 1, 'c': 3}, {'a': 2, 'c': 4}] assert clumper.equals(expected) ``` \"\"\" result = self . copy () for new_name , old_name in kwargs . items (): result = result . mutate ( ** { new_name : lambda d : d [ old_name ]}) . drop ( old_name ) return result Rename items in the collection. Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 3 }, { 'a' : 2 , 'b' : 4 }] clumper = Clumper ( data ) . rename ( c = \"b\" ) expected = [{ 'a' : 1 , 'c' : 3 }, { 'a' : 2 , 'c' : 4 }] assert clumper . equals ( expected ) select ( self , * keys ) \u00b6 Show source code in clumper/clump.py 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 @dict_collection_only def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](../img/select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).select('a', 'b') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ([{ k : d [ k ] for k in keys } for d in self . blob ]) Selects a subset of the keys in each item in the collection. Parameters Name Type Description Default *keys the keys to keep () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ]) show ( self , n = 1 , name = None ) \u00b6 Show source code in clumper/clump.py 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 def show ( self , n = 1 , name = None ): \"\"\" Prints the first `n` items in the clumper as an example. Very useful for debugging! This method requires [rich](https://github.com/willmcgugan/rich) if you want the pretty output. ```python from clumper import Clumper data = [{\"n\": 123, \"data\": [1, 2, 3], \"maintainer\": \"Vincent\"}] Clumper(data).show(n=1, name=\"Before\").explode(\"data\").show(n=3, name=\"After\") ``` ![](../img/show.png) \"\"\" try : from rich import print as rich_print from rich.panel import Panel from rich.pretty import Pretty item = self . head ( n ) . collect () title = f \"Clumper len= { len ( self ) } \" if len ( self . groups ) > 0 : title = f \"Clumper groups= { self . groups } len= { len ( self ) } \" rich_print ( Panel ( Pretty ( item ), title = f \" { name } : { title } \" if name else \"\" )) except ImportError : import pprint pp = pprint . PrettyPrinter ( indent = 4 ) pp . pprint ( self . head ( n ) . collect ()) return self Prints the first n items in the clumper as an example. Very useful for debugging! This method requires rich if you want the pretty output. from clumper import Clumper data = [{ \"n\" : 123 , \"data\" : [ 1 , 2 , 3 ], \"maintainer\" : \"Vincent\" }] Clumper ( data ) . show ( n = 1 , name = \"Before\" ) . explode ( \"data\" ) . show ( n = 3 , name = \"After\" ) sort ( self , key , reverse = False ) \u00b6 Show source code in clumper/clump.py 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 @grouped def sort ( self , key , reverse = False ): \"\"\" Allows you to sort the collection of dictionaries. ![](../img/sort.png) Arguments: key: the number of items to grab reverse: the number of items to grab Warning: This method is aware of groups. Expect different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 3, 'b': 3}, {'a': 2, 'b': 1}] (Clumper(list_dicts) .sort(lambda d: d['a']) .collect()) (Clumper(list_dicts) .sort(lambda d: d['b'], reverse=True) .collect()) ``` \"\"\" return self . _create_new ( sorted ( self . blob , key = key , reverse = reverse )) Allows you to sort the collection of dictionaries. Parameters Name Type Description Default key the number of items to grab required reverse the number of items to grab False Warning This method is aware of groups. Expect different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ()) sum ( self , col ) \u00b6 Show source code in clumper/clump.py 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 @dict_collection_only @return_value_if_empty ( value = None ) def sum ( self , col ): \"\"\" Give the sum of the values that belong to a key. ![](../img/sum.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).sum(\"a\") Clumper(list_of_dicts).sum(\"b\") ``` \"\"\" return self . summarise_col ( \"sum\" , col ) Give the sum of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" ) summarise_col ( self , func , key ) \u00b6 Show source code in clumper/clump.py 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 def summarise_col ( self , func , key ): \"\"\" Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `values`, `var`, `std`, `first` or `last`. Note that this method **ignores groups**. It also does not return a `Clumper` collection. Usage: ```python from clumper import Clumper clump = Clumper([{\"a\": 1}, {\"a\": 2}, {\"a\": 3}]) assert clump.summarise_col(\"last\", \"a\") == 3 assert clump.summarise_col(lambda d: d[-1], \"a\") == 3 ``` \"\"\" funcs = { \"mean\" : mean , \"count\" : lambda d : len ( d ), \"unique\" : lambda d : list ( set ( d )), \"n_unique\" : lambda d : len ( set ( d )), \"sum\" : sum , \"min\" : min , \"max\" : max , \"median\" : median , \"var\" : variance , \"std\" : stdev , \"values\" : lambda d : d , \"first\" : lambda d : d [ 0 ], \"last\" : lambda d : d [ - 1 ], } if isinstance ( func , str ): if func not in funcs . keys (): raise ValueError ( f \"Passed `func` must be in { funcs . keys () } , got { func } .\" ) func = funcs [ func ] array = [ d [ key ] for d in self if key in d . keys ()] return func ( array ) Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , values , var , std , first or last . Note that this method ignores groups . It also does not return a Clumper collection. Usage: from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 3 }]) assert clump . summarise_col ( \"last\" , \"a\" ) == 3 assert clump . summarise_col ( lambda d : d [ - 1 ], \"a\" ) == 3 tail ( self , n = 5 ) \u00b6 Show source code in clumper/clump.py 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 def tail ( self , n = 5 ): \"\"\" Selects the bottom `n` items from the collection. ![](../img/tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).tail(2) expected = [{'a': 3}, {'a': 4}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ( self . blob [ len ( self ) - n : len ( self )]) Selects the bottom n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . tail ( 2 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert result . equals ( expected ) transform ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 @grouped @dict_collection_only def transform ( self , ** kwargs ): \"\"\" Does an aggregation just like `.agg()` however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. ![](../img/transform-with-groups.png) Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper data = [ {\"a\": 6, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", \"sum\"), u=(\"a\", \"unique\"))) expected = [ {'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]} ] assert tfm_clump.equals(expected) ``` \"\"\" agg_results = self . agg ( ** kwargs ) return self . left_join ( agg_results , mapping = { k : k for k in self . groups }) Does an aggregation just like .agg() however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) ungroup ( self ) \u00b6 Show source code in clumper/clump.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 def ungroup ( self ): \"\"\" Removes all grouping from the collection. ![](../img/ungroup.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) assert clump.ungroup().groups == tuple() ``` \"\"\" self . groups = tuple () return self Removes all grouping from the collection. from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple () unique ( self , col ) \u00b6 Show source code in clumper/clump.py 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 @dict_collection_only @return_value_if_empty ( value = []) def unique ( self , col ): \"\"\" Returns a set of unique values that a key has. ![](../img/unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).unique(\"a\") == [2, 3, 7] assert Clumper(list_of_dicts).unique(\"b\") == [6, 7] ``` \"\"\" return self . summarise_col ( \"unique\" , col ) Returns a set of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . unique ( \"a\" ) == [ 2 , 3 , 7 ] assert Clumper ( list_of_dicts ) . unique ( \"b\" ) == [ 6 , 7 ] unpack ( self , name ) \u00b6 Show source code in clumper/clump.py 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 @dict_collection_only def unpack ( self , name ): \"\"\" Unpacks a nested list of dictionaries. ![](../img/unpack.png) Arguments: name: the name of the column to unpack ```python from clumper import Clumper list_dicts = { 'a': 1, 'rows': [{'b': 2, 'c': 3}, {'b': 3}, {'b': 4}] } result = Clumper(list_dicts).unpack('rows').collect() expected = [ {'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 3}, {'a': 1, 'b': 4} ] assert result == expected ``` \"\"\" new_blob = [] for row in self : for d in row [ name ]: new = { k : v for k , v in row . items () if k != name } new_blob . append ({ ** new , ** d }) return self . _create_new ( new_blob ) Unpacks a nested list of dictionaries. Parameters Name Type Description Default name the name of the column to unpack required from clumper import Clumper list_dicts = { 'a' : 1 , 'rows' : [{ 'b' : 2 , 'c' : 3 }, { 'b' : 3 }, { 'b' : 4 }] } result = Clumper ( list_dicts ) . unpack ( 'rows' ) . collect () expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 }, { 'a' : 1 , 'b' : 3 }, { 'a' : 1 , 'b' : 4 } ] assert result == expected write_csv ( self , path , mode = 'w' ) \u00b6 Show source code in clumper/clump.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 def write_csv ( self , path , mode = \"w\" ): \"\"\" Write to a csv file. Arguments: path: filename mode: `w` writes to a file if it does not exist, or overwrites if it already exists, while `a`: - append to file if it already exists. The default is `w`. Note that null values will be exported as empty strings; this is the convention chosen by Python. Usage: ```python from clumper import Clumper from pathlib import Path path = '/tmp/monopoly.csv' Clumper.read_csv(\"tests/data/monopoly.csv\").write_csv(path) reader = Clumper.read_csv(path) assert Clumper.read_csv(\"tests/data/monopoly.csv\").collect() == reader.collect() ``` \"\"\" with open ( path , mode = mode , newline = \"\" ) as csvfile : fieldnames = self . keys () writer = csv . DictWriter ( csvfile , fieldnames = fieldnames ) writer . writeheader () for row in self : writer . writerow ( row ) Write to a csv file. Parameters Name Type Description Default path: filename mode: w writes to a file if it does not exist, or overwrites if it already exists, while a : - append to file if it already exists. The default is w . Note that null values will be exported as empty strings; this is the convention chosen by Python. Usage: from clumper import Clumper from pathlib import Path path = '/tmp/monopoly.csv' Clumper . read_csv ( \"tests/data/monopoly.csv\" ) . write_csv ( path ) reader = Clumper . read_csv ( path ) assert Clumper . read_csv ( \"tests/data/monopoly.csv\" ) . collect () == reader . collect () write_json ( self , path , sort_keys = False , indent = None ) \u00b6 Show source code in clumper/clump.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 def write_json ( self , path , sort_keys = False , indent = None ): \"\"\" Writes to a json file. Arguments: path: filename sort_keys: If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. indent: If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. Usage: ```python from clumper import Clumper clump_orig = Clumper.read_json(\"tests/data/pokemon.json\") clump_orig.write_json(\"tests/data/pokemon_copy.json\") clump_copy = Clumper.read_json(\"tests/data/pokemon_copy.json\") assert clump_copy.collect() == clump_orig.collect() ``` \"\"\" # Create a new file and open it for writing with open ( path , \"w\" ) as f : json . dump ( self . collect (), f , sort_keys = sort_keys , indent = indent ) Writes to a json file. Parameters Name Type Description Default path filename required sort_keys If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. False indent If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. None Usage: from clumper import Clumper clump_orig = Clumper . read_json ( \"tests/data/pokemon.json\" ) clump_orig . write_json ( \"tests/data/pokemon_copy.json\" ) clump_copy = Clumper . read_json ( \"tests/data/pokemon_copy.json\" ) assert clump_copy . collect () == clump_orig . collect () write_jsonl ( self , path , sort_keys = False , indent = None ) \u00b6 Show source code in clumper/clump.py 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def write_jsonl ( self , path , sort_keys = False , indent = None ): \"\"\" Writes to a jsonl file. Arguments: path: filename sort_keys: If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. indent: If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. \"\"\" # Create a new file and open it for writing with open ( path , \"x\" ) as f : for current_line_nr , json_dict in enumerate ( self . collect ()): f . write ( json . dumps ( json_dict , sort_keys = sort_keys , indent = indent ) + \" \\n \" ) Writes to a jsonl file. Parameters Name Type Description Default path filename required sort_keys If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. False indent If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. None write_yaml ( self , path ) \u00b6 Show source code in clumper/clump.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 def write_yaml ( self , path ): \"\"\" Write the collection of data as a yaml file. Arguments: path: path to write the file to Important: This method requires the `PyYAML` dependency which is not installed automatically. To install it you can run; ``` # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] ``` Usage: ```python from clumper import Clumper clump_orig = Clumper.read_yaml(\"tests/data/demo-flat-1.yaml\") clump_orig.write_json(\"tests/data/demo-flat-copy.json\") clump_copy = Clumper.read_json(\"tests/data/demo-flat-copy.json\") assert clump_copy.collect() == clump_orig.collect() ``` \"\"\" try : import yaml with open ( path , \"x\" ) as f : txt = yaml . dump ( self . collect ()) f . write ( txt ) except ImportError : raise_yaml_dep_error () Write the collection of data as a yaml file. Parameters Name Type Description Default path path to write the file to required Important This method requires the PyYAML dependency which is not installed automatically. To install it you can run; # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] Usage: from clumper import Clumper clump_orig = Clumper . read_yaml ( \"tests/data/demo-flat-1.yaml\" ) clump_orig . write_json ( \"tests/data/demo-flat-copy.json\" ) clump_copy = Clumper . read_json ( \"tests/data/demo-flat-copy.json\" ) assert clump_copy . collect () == clump_orig . collect ()","title":"Clumper"},{"location":"api/clumper.html#clumper","text":"This object adds methods to a list of dictionaries that make it nicer to explore. Parameters Name Type Description Default blob the list of data to turn into a Clumper required groups specify any groups you'd like to attach to the Clumper () listify if the input is a dictionary, turn it into a list with one dictionary inside beforehand. True Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts ) assert len ( c ) == 4","title":"Clumper"},{"location":"api/clumper.html#clumper.clump.Clumper.agg","text":"Show source code in clumper/clump.py 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 @dict_collection_only @grouped def agg ( self , ** kwargs ): \"\"\" Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: 1. the name of the new key 2. the key you'd like to summarise (first item in the tuple) 3. the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `values`, `var`, `std`, `first` or `last`. ![](../img/split-apply-combine.png) Warning: This method is aware of groups. There may be different results if a group is active. Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 3} ] (Clumper(list_dicts) .agg(mean_a=('a', 'mean'), min_b=('b', 'min'), max_b=('b', 'max')) .collect()) another_list_dicts = [ {'a': 1, 'c': 'a'}, {'a': 2, 'c': 'b'}, {'a': 3, 'c': 'a'} ] (Clumper(another_list_dicts) .group_by('c') .agg(mean_a=('a', 'mean'), uniq_a=('a', 'unique')) .collect()) ``` Advanced Usage: You can also supply this verb your own functions if you'd like. ```python from clumper import Clumper data = [ {\"a\": 7, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", sum), u=(\"a\", lambda x: set(x)))) expected = [ {'a': 7, 'grp': 'a', 's': 19, 'u': {5, 7}}, {'a': 7, 'grp': 'a', 's': 19, 'u': {5, 7}}, {'a': 5, 'grp': 'a', 's': 19, 'u': {5, 7}}, {'a': 2, 'grp': 'b', 's': 11, 'u': {2, 9}}, {'a': 9, 'grp': 'b', 's': 11, 'u': {2, 9}} ] assert tfm_clump.equals(expected) ``` \"\"\" res = { name : self . summarise_col ( func_str , col ) for name , ( col , func_str ) in kwargs . items () } return Clumper ([ res ], groups = self . groups ) Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , values , var , std , first or last . Warning This method is aware of groups. There may be different results if a group is active. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) Advanced Usage: You can also supply this verb your own functions if you'd like. from clumper import Clumper data = [ { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : set ( x )))) expected = [ { 'a' : 7 , 'grp' : 'a' , 's' : 19 , 'u' : { 5 , 7 }}, { 'a' : 7 , 'grp' : 'a' , 's' : 19 , 'u' : { 5 , 7 }}, { 'a' : 5 , 'grp' : 'a' , 's' : 19 , 'u' : { 5 , 7 }}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : { 2 , 9 }}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : { 2 , 9 }} ] assert tfm_clump . equals ( expected )","title":"agg()"},{"location":"api/clumper.html#clumper.clump.Clumper.collect","text":"Show source code in clumper/clump.py 1332 1333 1334 1335 1336 1337 1338 def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](../img/collect.png) \"\"\" return self . blob Returns a list instead of a Clumper object.","title":"collect()"},{"location":"api/clumper.html#clumper.clump.Clumper.concat","text":"Show source code in clumper/clump.py 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 def concat ( self , * other ): \"\"\" Concatenate two or more `Clumper` objects together. ![](../img/concat.png) ```python from clumper import Clumper c1 = Clumper([{\"a\": 1}]) c2 = Clumper([{\"a\": 2}]) c3 = Clumper([{\"a\": 3}]) assert len(c1.concat(c2)) == 2 assert len(c1.concat(c2, c3)) == 3 assert len(c1.concat(c2).concat(c3)) == 3 ``` \"\"\" data = reduce ( lambda a , b : a + b , [ o . blob for o in other ]) return self . _create_new ( self . blob + data ) Concatenate two or more Clumper objects together. from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3","title":"concat()"},{"location":"api/clumper.html#clumper.clump.Clumper.copy","text":"Show source code in clumper/clump.py 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 def copy ( self ): \"\"\" Makes a copy of the collection. ![](../img/copy.png) Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] c1 = Clumper(list_dicts) c2 = c1.copy() assert id(c1) != id(c2) ``` \"\"\" return self . _create_new ([ d for d in self . blob ]) Makes a copy of the collection. Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] c1 = Clumper ( list_dicts ) c2 = c1 . copy () assert id ( c1 ) != id ( c2 )","title":"copy()"},{"location":"api/clumper.html#clumper.clump.Clumper.count","text":"Show source code in clumper/clump.py 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 @dict_collection_only @return_value_if_empty ( value = 0 ) def count ( self , col ): \"\"\" Counts how often a key appears in the collection. ![](../img/count.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).count(\"a\") == 4 assert Clumper(list_of_dicts).count(\"b\") == 3 ``` \"\"\" return self . summarise_col ( \"count\" , col ) Counts how often a key appears in the collection. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . count ( \"a\" ) == 4 assert Clumper ( list_of_dicts ) . count ( \"b\" ) == 3","title":"count()"},{"location":"api/clumper.html#clumper.clump.Clumper.drop","text":"Show source code in clumper/clump.py 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 @dict_collection_only def drop ( self , * keys ): \"\"\" Removes a subset of keys from each item in the collection. ![](../img/drop.png) Arguments: keys: the keys to remove Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).drop('c') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ( [{ k : v for k , v in d . items () if k not in keys } for d in self . blob ] ) Removes a subset of keys from each item in the collection. Parameters Name Type Description Default *keys the keys to remove () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"drop()"},{"location":"api/clumper.html#clumper.clump.Clumper.drop_duplicates","text":"Show source code in clumper/clump.py 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 def drop_duplicates ( self ): \"\"\" Iterates over all elements to remove duplicates. ![](../img/drop_duplicates.png) Usage: ```python from clumper import Clumper data = [{\"a\": 1}, {\"a\": 2}, {\"a\": 2}] clump = Clumper(data).drop_duplicates() expected = [{\"a\": 1}, {\"a\": 2}] assert clump.equals(expected) ``` \"\"\" uniques = [] for d in self : if d not in uniques : uniques . append ( d ) return self . _create_new ( uniques ) Iterates over all elements to remove duplicates. Usage: from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected )","title":"drop_duplicates()"},{"location":"api/clumper.html#clumper.clump.Clumper.equals","text":"Show source code in clumper/clump.py 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 def equals ( self , data ): \"\"\" Compares the collection of items with a list. Returns `True` if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. ![](../img/equals.png) Arguments: data: a list of that to compare against Usage: ```python from clumper import Clumper data = [{\"a\": 1}] clump = Clumper(data) assert clump.equals(data) assert not clump.equals([{\"b\":1}]) ``` \"\"\" for i in self : if i not in data : return False for i in data : if i not in self : return False return True Compares the collection of items with a list. Returns True if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. Parameters Name Type Description Default data a list of that to compare against required Usage: from clumper import Clumper data = [{ \"a\" : 1 }] clump = Clumper ( data ) assert clump . equals ( data ) assert not clump . equals ([{ \"b\" : 1 }])","title":"equals()"},{"location":"api/clumper.html#clumper.clump.Clumper.explode","text":"Show source code in clumper/clump.py 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 @dict_collection_only def explode ( self , * to_explode , ** kwargs ): \"\"\" Turns a list in an item into multiple items. The opposite of `.implode()`. ![](../img/explode.png) Arguments: to_explode: keys to explode, will keep the same name kwargs: (new name, keys to explode)-pairs Usage: ```python from clumper import Clumper data = [{'a': 1, 'items': [1, 2]}] clumper = Clumper(data).explode(\"items\") expected = [{'a': 1, 'items': 1}, {'a': 1, 'items': 2}] assert clumper.equals(expected) clumper = Clumper(data).explode(item=\"items\") expected = [{'a': 1, 'item': 1}, {'a': 1, 'item': 2}] assert clumper.equals(expected) ``` \"\"\" # you can keep the same name by just using *args or overwrite using **kwargs kwargs = { ** kwargs , ** { k : k for k in to_explode }} new_name , to_explode = kwargs . keys (), kwargs . values () res = [] for d in self . blob : combinations = it . product ( * [ d [ v ] for v in to_explode ]) for comb in combinations : new_dict = d . copy () for k , v in zip ( new_name , comb ): new_dict [ k ] = v res . append ( new_dict ) return self . _create_new ( res ) . drop ( * [ k for k in to_explode if k not in new_name ]) Turns a list in an item into multiple items. The opposite of .implode() . Parameters Name Type Description Default *to_explode keys to explode, will keep the same name () **kwargs (new name, keys to explode)-pairs {} Usage: from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) expected = [{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }] assert clumper . equals ( expected ) clumper = Clumper ( data ) . explode ( item = \"items\" ) expected = [{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }] assert clumper . equals ( expected )","title":"explode()"},{"location":"api/clumper.html#clumper.clump.Clumper.flatten_keys","text":"Show source code in clumper/clump.py 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 def flatten_keys ( self , keyname = \"key\" ): \"\"\" Flattens the keys in the data. Useful when `Clumper` is created with a single large dictionary. ![](../img/flatten_keys.png) Arguments: keyname: the name of the new key Usage: ```python from clumper import Clumper data = { 'feature_1': {'propery_1': 1, 'property_2': 2}, 'feature_2': {'propery_1': 3, 'property_2': 4}, 'feature_3': {'propery_1': 5, 'property_2': 6}, } expected = [ {'propery_1': 1, 'property_2': 2, 'key': 'feature_1'}, {'propery_1': 3, 'property_2': 4, 'key': 'feature_2'}, {'propery_1': 5, 'property_2': 6, 'key': 'feature_3'} ] assert Clumper(data, listify=False).flatten_keys().collect() == expected ``` \"\"\" return self . _create_new ([{ ** v , keyname : k } for k , v in self . blob . items ()]) Flattens the keys in the data. Useful when Clumper is created with a single large dictionary. Parameters Name Type Description Default keyname the name of the new key 'key' Usage: from clumper import Clumper data = { 'feature_1' : { 'propery_1' : 1 , 'property_2' : 2 }, 'feature_2' : { 'propery_1' : 3 , 'property_2' : 4 }, 'feature_3' : { 'propery_1' : 5 , 'property_2' : 6 }, } expected = [ { 'propery_1' : 1 , 'property_2' : 2 , 'key' : 'feature_1' }, { 'propery_1' : 3 , 'property_2' : 4 , 'key' : 'feature_2' }, { 'propery_1' : 5 , 'property_2' : 6 , 'key' : 'feature_3' } ] assert Clumper ( data , listify = False ) . flatten_keys () . collect () == expected","title":"flatten_keys()"},{"location":"api/clumper.html#clumper.clump.Clumper.group_by","text":"Show source code in clumper/clump.py 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 def group_by ( self , * cols ): \"\"\" Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with `.ungroup()`. ![](../img/groupby.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) ``` \"\"\" self . groups = cols return self Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with .ungroup() . from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , )","title":"group_by()"},{"location":"api/clumper.html#clumper.clump.Clumper.head","text":"Show source code in clumper/clump.py 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](../img/head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).head(2) expected = [{'a': 1}, {'a': 2}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ([ self . blob [ i ] for i in range ( n )]) Selects the top n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . head ( 2 ) expected = [{ 'a' : 1 }, { 'a' : 2 }] assert result . equals ( expected )","title":"head()"},{"location":"api/clumper.html#clumper.clump.Clumper.inner_join","text":"Show source code in clumper/clump.py 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 @dict_collection_only def inner_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs an inner join on two collections. ![](../img/inner_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\":4}, {\"a\": 2, \"b\":6}, {\"a\": 3, \"b\":8}, ]) right = Clumper([ {\"c\": 9, \"b\":4}, {\"c\": 8, \"b\":5}, {\"c\": 7, \"b\":6}, ]) result = left.inner_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) return self . _create_new ( result ) Performs an inner join on two collections. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected )","title":"inner_join()"},{"location":"api/clumper.html#clumper.clump.Clumper.keep","text":"Show source code in clumper/clump.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](../img/keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] clump = Clumper(list_dicts).keep(lambda d: d['a'] >= 3) expected = [{'a': 3}, {'a': 4}] assert clump.equals(expected) ``` \"\"\" data = self . blob . copy () for func in funcs : data = [ d for d in data if func ( d )] return self . _create_new ( data ) Allows you to select which items to keep and which items to remove. Parameters Name Type Description Default *funcs functions that indicate which items to keep () Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected )","title":"keep()"},{"location":"api/clumper.html#clumper.clump.Clumper.keys","text":"Show source code in clumper/clump.py 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 @dict_collection_only def keys ( self , overlap = False ): \"\"\" Returns all the keys of all the items in the collection. ![](../img/keys.png) Arguments: overlap: if `True` only return the keys that overlap in each set Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 2}, {'a': 2, 'c': 3}] assert set(Clumper(data).keys(overlap=True)) == {'a'} assert set(Clumper(data).keys(overlap=False)) == {'a', 'b', 'c'} ``` \"\"\" if overlap : all_keys = [ set ( d . keys ()) for d in self ] return list ( reduce ( lambda a , b : a . intersection ( b ), all_keys )) return list ({ k for d in self for k in d . keys ()}) Returns all the keys of all the items in the collection. Parameters Name Type Description Default overlap if True only return the keys that overlap in each set False Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'c' : 3 }] assert set ( Clumper ( data ) . keys ( overlap = True )) == { 'a' } assert set ( Clumper ( data ) . keys ( overlap = False )) == { 'a' , 'b' , 'c' }","title":"keys()"},{"location":"api/clumper.html#clumper.clump.Clumper.left_join","text":"Show source code in clumper/clump.py 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 @dict_collection_only def left_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. ![](../img/left_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\": 4}, {\"a\": 2, \"b\": 6}, {\"a\": 3, \"b\": 8}, ]) right = Clumper([ {\"c\": 9, \"b\": 4}, {\"c\": 8, \"b\": 5}, {\"c\": 7, \"b\": 6}, ]) result = left.left_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, {\"a\": 3, \"b\": 8}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] d_i_added = False for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) d_i_added = True if not d_i_added : result . append ( d_i ) return self . _create_new ( result ) Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected )","title":"left_join()"},{"location":"api/clumper.html#clumper.clump.Clumper.map","text":"Show source code in clumper/clump.py 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 def map ( self , func ): \"\"\" Directly map one item to another one using a function. If you're dealing with dictionaries, consider using `mutate` instead. ![](../img/map.png) Arguments: func: the function that will map each item Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}] (Clumper(list_dicts) .map(lambda d: {'a': d['a'], 'b': 1}) .collect()) ``` \"\"\" return self . _create_new ([ func ( d ) for d in self . blob ]) Directly map one item to another one using a function. If you're dealing with dictionaries, consider using mutate instead. Parameters Name Type Description Default func the function that will map each item required Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }] ( Clumper ( list_dicts ) . map ( lambda d : { 'a' : d [ 'a' ], 'b' : 1 }) . collect ())","title":"map()"},{"location":"api/clumper.html#clumper.clump.Clumper.max","text":"Show source code in clumper/clump.py 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 @dict_collection_only @return_value_if_empty ( value = None ) def max ( self , col ): \"\"\" Returns maximum value that a key has. ![](../img/max.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).max(\"a\") == 7 assert Clumper(list_of_dicts).max(\"b\") == 7 ``` \"\"\" return self . summarise_col ( \"max\" , col ) Returns maximum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . max ( \"a\" ) == 7 assert Clumper ( list_of_dicts ) . max ( \"b\" ) == 7","title":"max()"},{"location":"api/clumper.html#clumper.clump.Clumper.mean","text":"Show source code in clumper/clump.py 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 @dict_collection_only @return_value_if_empty ( value = None ) def mean ( self , col ): \"\"\" Give the mean of the values that belong to a key. ![](../img/mean.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert round(Clumper(list_of_dicts).mean(\"a\"), 1) == 3.5 assert round(Clumper(list_of_dicts).mean(\"b\"), 1) == 6.7 ``` \"\"\" return self . summarise_col ( \"mean\" , col ) Give the mean of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert round ( Clumper ( list_of_dicts ) . mean ( \"a\" ), 1 ) == 3.5 assert round ( Clumper ( list_of_dicts ) . mean ( \"b\" ), 1 ) == 6.7","title":"mean()"},{"location":"api/clumper.html#clumper.clump.Clumper.min","text":"Show source code in clumper/clump.py 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 @dict_collection_only @return_value_if_empty ( value = None ) def min ( self , col ): \"\"\" Returns minimum value that a key has. ![](../img/min.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).min(\"a\") == 2 assert Clumper(list_of_dicts).min(\"b\") == 6 ``` \"\"\" return self . summarise_col ( \"min\" , col ) Returns minimum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . min ( \"a\" ) == 2 assert Clumper ( list_of_dicts ) . min ( \"b\" ) == 6","title":"min()"},{"location":"api/clumper.html#clumper.clump.Clumper.mutate","text":"Show source code in clumper/clump.py 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 @grouped def mutate ( self , ** kwargs ): \"\"\" Adds or overrides key-value pairs in the collection of dictionaries. ![](../img/mutate.png) Arguments: kwargs: keyword arguments of keyname/function-pairs Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] result = (Clumper(list_dicts) .mutate(c=lambda d: d['a'] + d['b'], s=lambda d: d['a'] + d['b'] + d['c'])) expected = [ {'a': 1, 'b': 2, 'c': 3, 's': 6}, {'a': 2, 'b': 3, 'c': 5, 's': 10}, {'a': 1, 'b': 6, 'c': 7, 's': 14} ] assert result.equals(expected) ``` \"\"\" data = [] for d in self . blob . copy (): new = { k : v for k , v in d . items ()} for key , func in kwargs . items (): new [ key ] = func ( new ) data . append ( new ) return self . _create_new ( data ) Adds or overrides key-value pairs in the collection of dictionaries. Parameters Name Type Description Default **kwargs keyword arguments of keyname/function-pairs {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected )","title":"mutate()"},{"location":"api/clumper.html#clumper.clump.Clumper.n_unique","text":"Show source code in clumper/clump.py 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 @dict_collection_only @return_value_if_empty ( value = 0 ) def n_unique ( self , col ): \"\"\" Returns number of unique values that a key has. ![](../img/nunique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).n_unique(\"a\") == 3 assert Clumper(list_of_dicts).n_unique(\"b\") == 2 ``` \"\"\" return self . summarise_col ( \"n_unique\" , col ) Returns number of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . n_unique ( \"a\" ) == 3 assert Clumper ( list_of_dicts ) . n_unique ( \"b\" ) == 2","title":"n_unique()"},{"location":"api/clumper.html#clumper.clump.Clumper.pipe","text":"Show source code in clumper/clump.py 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 def pipe ( self , func , * args , ** kwargs ): \"\"\" Applies a function to the `Clumper` object in a chain-able manner. ![](../img/pipe.png) Arguments: func: function to apply args: arguments that will be passed to the function kwargs: keyword-arguments that will be passed to the function Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] def remove_outliers(clump, min_a, max_a): return (clump .keep(lambda d: d['a'] >= min_a, lambda d: d['a'] <= max_a)) result = Clumper(list_dicts).pipe(remove_outliers, min_a=10, max_a=90) assert len(result) == 81 ``` \"\"\" return func ( self , * args , ** kwargs ) Applies a function to the Clumper object in a chain-able manner. Parameters Name Type Description Default func function to apply required *args arguments that will be passed to the function () **kwargs keyword-arguments that will be passed to the function {} Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] def remove_outliers ( clump , min_a , max_a ): return ( clump . keep ( lambda d : d [ 'a' ] >= min_a , lambda d : d [ 'a' ] <= max_a )) result = Clumper ( list_dicts ) . pipe ( remove_outliers , min_a = 10 , max_a = 90 ) assert len ( result ) == 81","title":"pipe()"},{"location":"api/clumper.html#clumper.clump.Clumper.read_csv","text":"Show source code in clumper/clump.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 @classmethod @multifile () def read_csv ( cls , path , delimiter = \",\" , na_values = None , dtype = None , fieldnames = None , n = None , add_path = False , ): \"\"\" Reads in a csv file. Can also read files from url. ![](../img/read_csv.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. delimiter: Delimiter used in the csv file. Must be a single character and `,` is the default. n: Number of rows to read in. Useful when reading large files. If `None`, all rows are read. fieldnames: Allows you to set the fieldnames if the header is missing. By default, the first row of the csv will provide the Clumper keys if fieldnames is `None`. If fieldnames is provided, then the first row becomes part of the data. You should ensure that the correct number of fieldnames is supplied, as an incorrect number can lead to an irregular outcome. If the row has seven fields and the number of fields in fieldnames length is 3, then every row will have only 3 values, the remaining four will be lumped into a list, and assigned key `None`. If the rows have fewer fields than fieldnames, then the missing values are filled in with `None`. na_values: This provides an option for treating null values. If `ignore`, null values are returned as empty strings (\"\"). If `None`, then for each row, the key,value pair with the null values will be truncated from the row. The only values treated as null are empty strings(\"\") and \"NA\". add_path: Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. dtype: Data type for each value in a key:value pair. If `None`, then values will be read in as strings. Available dtypes are (int, float, str). If a single dtype is passed, then all values will be converted to the data type and raise an error, if not applicable. For different data types for different key, value pairs, a dictionary of {key: data_type} passed to dtype argument will change the value for every key with the data type, and raise an error if not applicable. Usage: ```python from clumper import Clumper clump = Clumper.read_csv(\"tests/data/monopoly.csv\") assert len(clump) == 22 clump = Clumper.read_csv(\"tests/data/monopoly.csv\", n = 10) assert len(clump) == 10 clump = Clumper.read_csv(\"https://calmcode.io/datasets/monopoly.csv\") assert len(clump) == 22 # If the fieldnames argument is not None, then the first row becomes part of the data. fieldnames = ['date', 'currency', 'country', 'price', 'dollar_rate', 'cost'] clump = Clumper.read_csv(\"https://calmcode.io/datasets/bigmac.csv\", fieldnames=fieldnames) first_row = ['date', 'currency_code','name','local_price', 'dollar_ex', 'dollar_price'] assert clump.head(1).equals([dict(zip(fieldnames, first_row))]) ``` \"\"\" if n is not None : if n <= 0 : raise ValueError ( \"Number of lines to read must be > 0.\" ) # conveniently excludes pathlib files here and removes # the need to write code to check pathlib files in other places. # Quick conversion in case of Path object path = str ( path ) if path . startswith (( \"https:\" , \"http:\" )): with urllib . request . urlopen ( path ) as resp : if fieldnames is None : fieldnames = resp . readline () . decode () . strip () . split ( \",\" ) # This section allows us to chunk the rows, if nrows is supplied. body = it . islice ( resp , 0 , n ) body = ( word . decode () . strip () . split ( \",\" ) for word in body ) body = it . product ([ fieldnames ], body ) result = [ dict ( zip ( key , values )) for key , values in body ] else : with open ( path , newline = \"\" ) as csvfile : reader = csv . DictReader ( csvfile , delimiter = delimiter , fieldnames = fieldnames ) # python version less than 3.8 returns an OrderedDict result = [ dict ( entry ) for entry in it . islice ( reader , 0 , n )] # Null values, same as missing keys. # If there are null values/missing keys, they will be truncated from the dictionary. # Python's csv module treats null values as empty strings when writing to a csv - # https://docs.python.org/3.8/library/csv.html#csv.DictWriter. # The user can choose to explicitly show missing keys/null values in the dictionary, # by assigning `ignore` to the na_values argument. At the moment, the default for # null values are empty string (\"\") and \"NA\". if na_values == \"ignore\" : result = result else : na_values = [ \"\" , \"NA\" ] result = [ { key : value for key , value in entry . items () if value not in na_values } for entry in result ] # The csv module reads every row as a string, there are no data type assumptions. # This function attempts to solve this. The user can pass a string of either # ('int', 'str', 'float') or if the user knows the keys/fieldnames, can pass a # dictionary mapping the key to the data type. # Technically 'str' data type is not needed, since data is read in as strings anyway. if not ( isinstance ( dtype , ( dict , str )) or dtype is None ): raise TypeError ( \"\"\"dtype should be a dictionary pair of key and data type, or a single string data type\"\"\" ) dtype_mapping = { \"int\" : int , \"float\" : float , \"str\" : str } if dtype : if isinstance ( dtype , str ) and dtype in ( \"int\" , \"float\" , \"str\" ): result = [ { key : dtype_mapping [ dtype ]( value ) for key , value in entry . items ()} for entry in result ] else : result = [ { key : dtype_mapping [ dtype [ key ]]( value ) if key in dtype else value for key , value in entry . items () } for entry in result ] if add_path : return Clumper ( result ) . mutate ( read_path = lambda d : path ) return Clumper ( result ) Reads in a csv file. Can also read files from url. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required delimiter Delimiter used in the csv file. Must be a single character and , is the default. ',' n Number of rows to read in. Useful when reading large files. If None , all rows are read. None fieldnames Allows you to set the fieldnames if the header is missing. By default, the first row of the csv will provide the Clumper keys if fieldnames is None . If fieldnames is provided, then the first row becomes part of the data. You should ensure that the correct number of fieldnames is supplied, as an incorrect number can lead to an irregular outcome. If the row has seven fields and the number of fields in fieldnames length is 3, then every row will have only 3 values, the remaining four will be lumped into a list, and assigned key None . If the rows have fewer fields than fieldnames, then the missing values are filled in with None . None na_values This provides an option for treating null values. If ignore , null values are returned as empty strings (\"\"). If None , then for each row, the key,value pair with the null values will be truncated from the row. The only values treated as null are empty strings(\"\") and \"NA\". None add_path Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False dtype Data type for each value in a key:value pair. If None , then values will be read in as strings. Available dtypes are (int, float, str). If a single dtype is passed, then all values will be converted to the data type and raise an error, if not applicable. For different data types for different key, value pairs, a dictionary of {key: data_type} passed to dtype argument will change the value for every key with the data type, and raise an error if not applicable. None Usage: from clumper import Clumper clump = Clumper . read_csv ( \"tests/data/monopoly.csv\" ) assert len ( clump ) == 22 clump = Clumper . read_csv ( \"tests/data/monopoly.csv\" , n = 10 ) assert len ( clump ) == 10 clump = Clumper . read_csv ( \"https://calmcode.io/datasets/monopoly.csv\" ) assert len ( clump ) == 22 # If the fieldnames argument is not None, then the first row becomes part of the data. fieldnames = [ 'date' , 'currency' , 'country' , 'price' , 'dollar_rate' , 'cost' ] clump = Clumper . read_csv ( \"https://calmcode.io/datasets/bigmac.csv\" , fieldnames = fieldnames ) first_row = [ 'date' , 'currency_code' , 'name' , 'local_price' , 'dollar_ex' , 'dollar_price' ] assert clump . head ( 1 ) . equals ([ dict ( zip ( fieldnames , first_row ))])","title":"read_csv()"},{"location":"api/clumper.html#clumper.clump.Clumper.read_json","text":"Show source code in clumper/clump.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 @classmethod @multifile () def read_json ( cls , path , n = None , listify = True , add_path = False ): \"\"\" Reads in a json file. Can also read files from url. ![](../img/read_json.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. n: Number of rows to read in. Useful when reading large files. If `None`, all rows are read. listify: if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. add_path: Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. Usage: ```python from clumper import Clumper clump = Clumper.read_json(\"tests/data/pokemon.json\") assert len(clump) == 800 clump = Clumper.read_json(\"https://calmcode.io/datasets/got.json\") assert len(clump) == 30 clump = Clumper.read_json(\"https://calmcode.io/datasets/got.json\", n=10) assert len(clump) == 10 ``` \"\"\" if n is not None : if n <= 0 : raise ValueError ( \"Number of lines to read must be > 0.\" ) # Quick conversion in case of Path object path = str ( path ) if path . startswith ( \"https:\" ) or path . startswith ( \"http:\" ): with urllib . request . urlopen ( path ) as resp : data = json . loads ( resp . read ()) else : data = json . loads ( pathlib . Path ( path ) . read_text ()) if add_path : if isinstance ( data , dict ): data [ \"read_path\" ] = path if isinstance ( data , list ): for d in data : d [ \"read_path\" ] = path if n : return Clumper ( list ( it . islice ( data , 0 , n ))) return Clumper ( data , listify = listify ) Reads in a json file. Can also read files from url. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required n Number of rows to read in. Useful when reading large files. If None , all rows are read. None listify if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. True add_path Adds the name of the read path to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False Usage: from clumper import Clumper clump = Clumper . read_json ( \"tests/data/pokemon.json\" ) assert len ( clump ) == 800 clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) assert len ( clump ) == 30 clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" , n = 10 ) assert len ( clump ) == 10","title":"read_json()"},{"location":"api/clumper.html#clumper.clump.Clumper.read_jsonl","text":"Show source code in clumper/clump.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 @classmethod @multifile () def read_jsonl ( cls , path , n = None , listify = True , add_path = False ): \"\"\" Reads in a jsonl file. Can also read files from url. ![](../img/read_jsonl.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. n: Number of rows to read in. Useful when reading large files. If `None`, all rows are read. listify: if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. add_path: Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. Usage: ```python from clumper import Clumper clump = Clumper.read_jsonl(\"tests/data/cards.jsonl\") assert len(clump) == 4 clump = Clumper.read_jsonl(\"https://calmcode.io/datasets/pokemon.jsonl\") assert len(clump) == 800 clump = Clumper.read_jsonl(\"https://calmcode.io/datasets/pokemon.jsonl\", n=10) assert len(clump) == 10 ``` \"\"\" if n is not None : if n <= 0 : raise ValueError ( \"Number of lines to read must be > 0.\" ) # Quick conversion in case of Path object path = str ( path ) # Case 1 : Open cloud file in stream if path . startswith ( \"https:\" ) or path . startswith ( \"http:\" ): f = urllib . request . urlopen ( path ) # Case 2 : Local file else : f = open ( path ) # Initialize a place to store the parsed data as list data_array = [] # Read it, parse and close it with f : for current_line_nr , json_string in enumerate ( f ): if n is not None and current_line_nr == n : break json_object = json . loads ( json_string ) data_array . append ( json_object ) if add_path : for d in data_array : d [ \"read_path\" ] = path # Return it return Clumper ( data_array , listify = listify ) Reads in a jsonl file. Can also read files from url. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required n Number of rows to read in. Useful when reading large files. If None , all rows are read. None listify if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. True add_path Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False Usage: from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/cards.jsonl\" ) assert len ( clump ) == 4 clump = Clumper . read_jsonl ( \"https://calmcode.io/datasets/pokemon.jsonl\" ) assert len ( clump ) == 800 clump = Clumper . read_jsonl ( \"https://calmcode.io/datasets/pokemon.jsonl\" , n = 10 ) assert len ( clump ) == 10","title":"read_jsonl()"},{"location":"api/clumper.html#clumper.clump.Clumper.read_yaml","text":"Show source code in clumper/clump.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 @classmethod @multifile () def read_yaml ( cls , path , n = None , listify = True , add_path = False ): \"\"\" Reads in a yaml file. ![](../img/read_yaml.png) Arguments: path: filename, url, `pathlib.Path` or list of `pathlib.Path`. Filenames can include a wildcard `*`. n: number of lines to read in, if `None` will read all listify: if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. add_path: Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. Important: This method requires the `PyYAML` dependency which is not installed automatically. To install it you can run; ``` # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] ``` Usage: ```python from clumper import Clumper clump = Clumper.read_yaml(\"tests/data/demo-flat-1.yaml\") assert len(clump) == 3 clump = Clumper.read_yaml(\"tests/data/demo-flat-*.yaml\") assert len(clump) == 6 ``` \"\"\" # Quick conversion in case of Path object path = str ( path ) # Case 1 : Open cloud file in stream if path . startswith (( \"https:\" , \"http:\" )): f = urllib . request . urlopen ( path ) # Case 2 : Local file else : f = open ( path ) # Try to load it but tell the user to install if not there. try : import yaml data = yaml . load ( f . read (), Loader = yaml . FullLoader ) if isinstance ( data , dict ): if add_path : data [ \"read_path\" ] = path return Clumper ( data , listify = listify ) if add_path : for d in data : d [ \"read_path\" ] = path if n : return Clumper ( list ( it . islice ( data , 0 , n )), listify = listify ) return Clumper ( data , listify = listify ) except ImportError : raise_yaml_dep_error () Reads in a yaml file. Parameters Name Type Description Default path filename, url, pathlib.Path or list of pathlib.Path . Filenames can include a wildcard * . required n number of lines to read in, if None will read all None listify if the input is a single json dictionary, turn it into a list with that dictionary inside of it before passing it along to the Clumper. True add_path Adds the name of the filepath to each item in the Clumper. Is useful when using wildcards to read in multiple files at once. False Important This method requires the PyYAML dependency which is not installed automatically. To install it you can run; # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] Usage: from clumper import Clumper clump = Clumper . read_yaml ( \"tests/data/demo-flat-1.yaml\" ) assert len ( clump ) == 3 clump = Clumper . read_yaml ( \"tests/data/demo-flat-*.yaml\" ) assert len ( clump ) == 6","title":"read_yaml()"},{"location":"api/clumper.html#clumper.clump.Clumper.reduce","text":"Show source code in clumper/clump.py 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 def reduce ( self , ** kwargs ): \"\"\" Reduce the collection using reducing functions. ![](../img/reduce.png) Arguments: kwargs: key-function pairs Usage: ```python from clumper import Clumper list_ints = [1, 2, 3, 4, 5] (Clumper(list_ints) .reduce(sum_a = lambda x,y: x + y, min_a = lambda x,y: min(x, y), max_a = lambda x,y: max(x, y)) .collect()) ``` \"\"\" return self . _create_new ( [{ k : reduce ( func , [ b for b in self . blob ]) for k , func in kwargs . items ()}] ) Reduce the collection using reducing functions. Parameters Name Type Description Default **kwargs key-function pairs {} Usage: from clumper import Clumper list_ints = [ 1 , 2 , 3 , 4 , 5 ] ( Clumper ( list_ints ) . reduce ( sum_a = lambda x , y : x + y , min_a = lambda x , y : min ( x , y ), max_a = lambda x , y : max ( x , y )) . collect ())","title":"reduce()"},{"location":"api/clumper.html#clumper.clump.Clumper.rename","text":"Show source code in clumper/clump.py 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 def rename ( self , ** kwargs ): \"\"\" Rename items in the collection. Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 3}, {'a': 2, 'b': 4}] clumper = Clumper(data).rename(c=\"b\") expected = [{'a': 1, 'c': 3}, {'a': 2, 'c': 4}] assert clumper.equals(expected) ``` \"\"\" result = self . copy () for new_name , old_name in kwargs . items (): result = result . mutate ( ** { new_name : lambda d : d [ old_name ]}) . drop ( old_name ) return result Rename items in the collection. Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 3 }, { 'a' : 2 , 'b' : 4 }] clumper = Clumper ( data ) . rename ( c = \"b\" ) expected = [{ 'a' : 1 , 'c' : 3 }, { 'a' : 2 , 'c' : 4 }] assert clumper . equals ( expected )","title":"rename()"},{"location":"api/clumper.html#clumper.clump.Clumper.select","text":"Show source code in clumper/clump.py 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 @dict_collection_only def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](../img/select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).select('a', 'b') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ([{ k : d [ k ] for k in keys } for d in self . blob ]) Selects a subset of the keys in each item in the collection. Parameters Name Type Description Default *keys the keys to keep () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"select()"},{"location":"api/clumper.html#clumper.clump.Clumper.show","text":"Show source code in clumper/clump.py 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 def show ( self , n = 1 , name = None ): \"\"\" Prints the first `n` items in the clumper as an example. Very useful for debugging! This method requires [rich](https://github.com/willmcgugan/rich) if you want the pretty output. ```python from clumper import Clumper data = [{\"n\": 123, \"data\": [1, 2, 3], \"maintainer\": \"Vincent\"}] Clumper(data).show(n=1, name=\"Before\").explode(\"data\").show(n=3, name=\"After\") ``` ![](../img/show.png) \"\"\" try : from rich import print as rich_print from rich.panel import Panel from rich.pretty import Pretty item = self . head ( n ) . collect () title = f \"Clumper len= { len ( self ) } \" if len ( self . groups ) > 0 : title = f \"Clumper groups= { self . groups } len= { len ( self ) } \" rich_print ( Panel ( Pretty ( item ), title = f \" { name } : { title } \" if name else \"\" )) except ImportError : import pprint pp = pprint . PrettyPrinter ( indent = 4 ) pp . pprint ( self . head ( n ) . collect ()) return self Prints the first n items in the clumper as an example. Very useful for debugging! This method requires rich if you want the pretty output. from clumper import Clumper data = [{ \"n\" : 123 , \"data\" : [ 1 , 2 , 3 ], \"maintainer\" : \"Vincent\" }] Clumper ( data ) . show ( n = 1 , name = \"Before\" ) . explode ( \"data\" ) . show ( n = 3 , name = \"After\" )","title":"show()"},{"location":"api/clumper.html#clumper.clump.Clumper.sort","text":"Show source code in clumper/clump.py 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 @grouped def sort ( self , key , reverse = False ): \"\"\" Allows you to sort the collection of dictionaries. ![](../img/sort.png) Arguments: key: the number of items to grab reverse: the number of items to grab Warning: This method is aware of groups. Expect different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 3, 'b': 3}, {'a': 2, 'b': 1}] (Clumper(list_dicts) .sort(lambda d: d['a']) .collect()) (Clumper(list_dicts) .sort(lambda d: d['b'], reverse=True) .collect()) ``` \"\"\" return self . _create_new ( sorted ( self . blob , key = key , reverse = reverse )) Allows you to sort the collection of dictionaries. Parameters Name Type Description Default key the number of items to grab required reverse the number of items to grab False Warning This method is aware of groups. Expect different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ())","title":"sort()"},{"location":"api/clumper.html#clumper.clump.Clumper.sum","text":"Show source code in clumper/clump.py 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 @dict_collection_only @return_value_if_empty ( value = None ) def sum ( self , col ): \"\"\" Give the sum of the values that belong to a key. ![](../img/sum.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).sum(\"a\") Clumper(list_of_dicts).sum(\"b\") ``` \"\"\" return self . summarise_col ( \"sum\" , col ) Give the sum of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" )","title":"sum()"},{"location":"api/clumper.html#clumper.clump.Clumper.summarise_col","text":"Show source code in clumper/clump.py 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 def summarise_col ( self , func , key ): \"\"\" Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `values`, `var`, `std`, `first` or `last`. Note that this method **ignores groups**. It also does not return a `Clumper` collection. Usage: ```python from clumper import Clumper clump = Clumper([{\"a\": 1}, {\"a\": 2}, {\"a\": 3}]) assert clump.summarise_col(\"last\", \"a\") == 3 assert clump.summarise_col(lambda d: d[-1], \"a\") == 3 ``` \"\"\" funcs = { \"mean\" : mean , \"count\" : lambda d : len ( d ), \"unique\" : lambda d : list ( set ( d )), \"n_unique\" : lambda d : len ( set ( d )), \"sum\" : sum , \"min\" : min , \"max\" : max , \"median\" : median , \"var\" : variance , \"std\" : stdev , \"values\" : lambda d : d , \"first\" : lambda d : d [ 0 ], \"last\" : lambda d : d [ - 1 ], } if isinstance ( func , str ): if func not in funcs . keys (): raise ValueError ( f \"Passed `func` must be in { funcs . keys () } , got { func } .\" ) func = funcs [ func ] array = [ d [ key ] for d in self if key in d . keys ()] return func ( array ) Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , values , var , std , first or last . Note that this method ignores groups . It also does not return a Clumper collection. Usage: from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 3 }]) assert clump . summarise_col ( \"last\" , \"a\" ) == 3 assert clump . summarise_col ( lambda d : d [ - 1 ], \"a\" ) == 3","title":"summarise_col()"},{"location":"api/clumper.html#clumper.clump.Clumper.tail","text":"Show source code in clumper/clump.py 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 def tail ( self , n = 5 ): \"\"\" Selects the bottom `n` items from the collection. ![](../img/tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).tail(2) expected = [{'a': 3}, {'a': 4}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ( self . blob [ len ( self ) - n : len ( self )]) Selects the bottom n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . tail ( 2 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert result . equals ( expected )","title":"tail()"},{"location":"api/clumper.html#clumper.clump.Clumper.transform","text":"Show source code in clumper/clump.py 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 @grouped @dict_collection_only def transform ( self , ** kwargs ): \"\"\" Does an aggregation just like `.agg()` however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. ![](../img/transform-with-groups.png) Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper data = [ {\"a\": 6, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", \"sum\"), u=(\"a\", \"unique\"))) expected = [ {'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]} ] assert tfm_clump.equals(expected) ``` \"\"\" agg_results = self . agg ( ** kwargs ) return self . left_join ( agg_results , mapping = { k : k for k in self . groups }) Does an aggregation just like .agg() however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected )","title":"transform()"},{"location":"api/clumper.html#clumper.clump.Clumper.ungroup","text":"Show source code in clumper/clump.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 def ungroup ( self ): \"\"\" Removes all grouping from the collection. ![](../img/ungroup.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) assert clump.ungroup().groups == tuple() ``` \"\"\" self . groups = tuple () return self Removes all grouping from the collection. from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple ()","title":"ungroup()"},{"location":"api/clumper.html#clumper.clump.Clumper.unique","text":"Show source code in clumper/clump.py 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 @dict_collection_only @return_value_if_empty ( value = []) def unique ( self , col ): \"\"\" Returns a set of unique values that a key has. ![](../img/unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).unique(\"a\") == [2, 3, 7] assert Clumper(list_of_dicts).unique(\"b\") == [6, 7] ``` \"\"\" return self . summarise_col ( \"unique\" , col ) Returns a set of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . unique ( \"a\" ) == [ 2 , 3 , 7 ] assert Clumper ( list_of_dicts ) . unique ( \"b\" ) == [ 6 , 7 ]","title":"unique()"},{"location":"api/clumper.html#clumper.clump.Clumper.unpack","text":"Show source code in clumper/clump.py 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 @dict_collection_only def unpack ( self , name ): \"\"\" Unpacks a nested list of dictionaries. ![](../img/unpack.png) Arguments: name: the name of the column to unpack ```python from clumper import Clumper list_dicts = { 'a': 1, 'rows': [{'b': 2, 'c': 3}, {'b': 3}, {'b': 4}] } result = Clumper(list_dicts).unpack('rows').collect() expected = [ {'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 3}, {'a': 1, 'b': 4} ] assert result == expected ``` \"\"\" new_blob = [] for row in self : for d in row [ name ]: new = { k : v for k , v in row . items () if k != name } new_blob . append ({ ** new , ** d }) return self . _create_new ( new_blob ) Unpacks a nested list of dictionaries. Parameters Name Type Description Default name the name of the column to unpack required from clumper import Clumper list_dicts = { 'a' : 1 , 'rows' : [{ 'b' : 2 , 'c' : 3 }, { 'b' : 3 }, { 'b' : 4 }] } result = Clumper ( list_dicts ) . unpack ( 'rows' ) . collect () expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 }, { 'a' : 1 , 'b' : 3 }, { 'a' : 1 , 'b' : 4 } ] assert result == expected","title":"unpack()"},{"location":"api/clumper.html#clumper.clump.Clumper.write_csv","text":"Show source code in clumper/clump.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 def write_csv ( self , path , mode = \"w\" ): \"\"\" Write to a csv file. Arguments: path: filename mode: `w` writes to a file if it does not exist, or overwrites if it already exists, while `a`: - append to file if it already exists. The default is `w`. Note that null values will be exported as empty strings; this is the convention chosen by Python. Usage: ```python from clumper import Clumper from pathlib import Path path = '/tmp/monopoly.csv' Clumper.read_csv(\"tests/data/monopoly.csv\").write_csv(path) reader = Clumper.read_csv(path) assert Clumper.read_csv(\"tests/data/monopoly.csv\").collect() == reader.collect() ``` \"\"\" with open ( path , mode = mode , newline = \"\" ) as csvfile : fieldnames = self . keys () writer = csv . DictWriter ( csvfile , fieldnames = fieldnames ) writer . writeheader () for row in self : writer . writerow ( row ) Write to a csv file. Parameters Name Type Description Default path: filename mode: w writes to a file if it does not exist, or overwrites if it already exists, while a : - append to file if it already exists. The default is w . Note that null values will be exported as empty strings; this is the convention chosen by Python. Usage: from clumper import Clumper from pathlib import Path path = '/tmp/monopoly.csv' Clumper . read_csv ( \"tests/data/monopoly.csv\" ) . write_csv ( path ) reader = Clumper . read_csv ( path ) assert Clumper . read_csv ( \"tests/data/monopoly.csv\" ) . collect () == reader . collect ()","title":"write_csv()"},{"location":"api/clumper.html#clumper.clump.Clumper.write_json","text":"Show source code in clumper/clump.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 def write_json ( self , path , sort_keys = False , indent = None ): \"\"\" Writes to a json file. Arguments: path: filename sort_keys: If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. indent: If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. Usage: ```python from clumper import Clumper clump_orig = Clumper.read_json(\"tests/data/pokemon.json\") clump_orig.write_json(\"tests/data/pokemon_copy.json\") clump_copy = Clumper.read_json(\"tests/data/pokemon_copy.json\") assert clump_copy.collect() == clump_orig.collect() ``` \"\"\" # Create a new file and open it for writing with open ( path , \"w\" ) as f : json . dump ( self . collect (), f , sort_keys = sort_keys , indent = indent ) Writes to a json file. Parameters Name Type Description Default path filename required sort_keys If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. False indent If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. None Usage: from clumper import Clumper clump_orig = Clumper . read_json ( \"tests/data/pokemon.json\" ) clump_orig . write_json ( \"tests/data/pokemon_copy.json\" ) clump_copy = Clumper . read_json ( \"tests/data/pokemon_copy.json\" ) assert clump_copy . collect () == clump_orig . collect ()","title":"write_json()"},{"location":"api/clumper.html#clumper.clump.Clumper.write_jsonl","text":"Show source code in clumper/clump.py 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def write_jsonl ( self , path , sort_keys = False , indent = None ): \"\"\" Writes to a jsonl file. Arguments: path: filename sort_keys: If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. indent: If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. \"\"\" # Create a new file and open it for writing with open ( path , \"x\" ) as f : for current_line_nr , json_dict in enumerate ( self . collect ()): f . write ( json . dumps ( json_dict , sort_keys = sort_keys , indent = indent ) + \" \\n \" ) Writes to a jsonl file. Parameters Name Type Description Default path filename required sort_keys If sort_keys is true (default: False), then the output of dictionaries will be sorted by key. False indent If indent is a non-negative integer (default: None), then JSON array elements members will be pretty-printed with that indent level. None","title":"write_jsonl()"},{"location":"api/clumper.html#clumper.clump.Clumper.write_yaml","text":"Show source code in clumper/clump.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 def write_yaml ( self , path ): \"\"\" Write the collection of data as a yaml file. Arguments: path: path to write the file to Important: This method requires the `PyYAML` dependency which is not installed automatically. To install it you can run; ``` # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] ``` Usage: ```python from clumper import Clumper clump_orig = Clumper.read_yaml(\"tests/data/demo-flat-1.yaml\") clump_orig.write_json(\"tests/data/demo-flat-copy.json\") clump_copy = Clumper.read_json(\"tests/data/demo-flat-copy.json\") assert clump_copy.collect() == clump_orig.collect() ``` \"\"\" try : import yaml with open ( path , \"x\" ) as f : txt = yaml . dump ( self . collect ()) f . write ( txt ) except ImportError : raise_yaml_dep_error () Write the collection of data as a yaml file. Parameters Name Type Description Default path path to write the file to required Important This method requires the PyYAML dependency which is not installed automatically. To install it you can run; # This will only install the yaml dependencies. pip install clumper[yaml] # This will install all optional dependencies. pip install clumper[all] Usage: from clumper import Clumper clump_orig = Clumper . read_yaml ( \"tests/data/demo-flat-1.yaml\" ) clump_orig . write_json ( \"tests/data/demo-flat-copy.json\" ) clump_copy = Clumper . read_json ( \"tests/data/demo-flat-copy.json\" ) assert clump_copy . collect () == clump_orig . collect ()","title":"write_yaml()"},{"location":"api/sequence.html","text":"from clumper.sequence import * \u00b6 A collection of functions to be used in mutate / map -verbs. expanding \u00b6 This stateful function can be used to expand a key into a large list containing all the seen values. Parameters Name Type Description Default key the key to apply the smoothing to None Usage: from clumper import Clumper from clumper.sequence import expanding list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = expanding ( key = 'a' )) . collect ()) impute \u00b6 This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to required strategy the strategy to apply 'prev' fallback if the strategy fails, what value to use None Usage: from clumper import Clumper from clumper.sequence import impute list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 , 'b' : 6 }, { 'a' : 5 }, ] ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'prev' ), c = lambda d : d [ 'a' ] + d [ 'b' ]) . collect ()) ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'value' , fallback = 0 )) . collect ()) rolling \u00b6 This stateful function can be used to create a moving window over a key. Parameters Name Type Description Default key the key to apply the smoothing to None window the size of the window to create 5 Usage: from clumper import Clumper from clumper.sequence import rolling list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = rolling ( window = 2 , key = 'a' )) . collect ()) row_number \u00b6 This stateful function can be used to calculate row numbers. Usage: from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ()) smoothing \u00b6 This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to None weight exponential smoothing parameter, if 1.0 then we don't listen to the past anymore 0.5 Usage: from clumper import Clumper from clumper.sequence import smoothing list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( s1 = smoothing ( key = 'a' , weight = 0.5 ), s2 = smoothing ( key = 'a' , weight = 0.9 )) . collect ())","title":"sequence"},{"location":"api/sequence.html#from-clumpersequence-import","text":"A collection of functions to be used in mutate / map -verbs.","title":"from clumper.sequence import *"},{"location":"api/sequence.html#clumper.sequence.expanding","text":"This stateful function can be used to expand a key into a large list containing all the seen values. Parameters Name Type Description Default key the key to apply the smoothing to None Usage: from clumper import Clumper from clumper.sequence import expanding list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = expanding ( key = 'a' )) . collect ())","title":"expanding"},{"location":"api/sequence.html#clumper.sequence.impute","text":"This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to required strategy the strategy to apply 'prev' fallback if the strategy fails, what value to use None Usage: from clumper import Clumper from clumper.sequence import impute list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 , 'b' : 6 }, { 'a' : 5 }, ] ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'prev' ), c = lambda d : d [ 'a' ] + d [ 'b' ]) . collect ()) ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'value' , fallback = 0 )) . collect ())","title":"impute"},{"location":"api/sequence.html#clumper.sequence.rolling","text":"This stateful function can be used to create a moving window over a key. Parameters Name Type Description Default key the key to apply the smoothing to None window the size of the window to create 5 Usage: from clumper import Clumper from clumper.sequence import rolling list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = rolling ( window = 2 , key = 'a' )) . collect ())","title":"rolling"},{"location":"api/sequence.html#clumper.sequence.row_number","text":"This stateful function can be used to calculate row numbers. Usage: from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ())","title":"row_number"},{"location":"api/sequence.html#clumper.sequence.smoothing","text":"This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to None weight exponential smoothing parameter, if 1.0 then we don't listen to the past anymore 0.5 Usage: from clumper import Clumper from clumper.sequence import smoothing list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( s1 = smoothing ( key = 'a' , weight = 0.5 ), s2 = smoothing ( key = 'a' , weight = 0.9 )) . collect ())","title":"smoothing"},{"location":"examples/got.html","text":"We'll demonstrate a task using some data from game of thrones. The data was originally retreived via an api of fire and ice . Fetching Data \u00b6 This library has a class method that allows you to read json. This can be data from disk, or a web url. We'll download the data and have a quick look at the contents. from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) clump . head ( 1 ) . collect () This yields: [{ 'url' : [ 'https://www.anapioficeandfire.com/api/characters/1022' ], 'id' : [ 1022 ], 'name' : [ 'Theon Greyjoy' ], 'gender' : [ 'Male' ], 'culture' : [ 'Ironborn' ], 'born' : [ 'In 278 AC or 279 AC, at Pyke' ], 'died' : [ '' ], 'alive' : [ True ], 'titles' : [ 'Prince of Winterfell' , 'Captain of Sea Bitch' , 'Lord of the Iron Islands (by law of the green lands)' ], 'aliases' : [ 'Prince of Fools' , 'Theon Turncloak' , 'Reek' , 'Theon Kinslayer' ], 'father' : [ '' ], 'mother' : [ '' ], 'spouse' : [ '' ], 'allegiances' : [ 'House Greyjoy of Pyke' ], 'books' : [ 'A Game of Thrones' , 'A Storm of Swords' , 'A Feast for Crows' ], 'povBooks' : [ 'A Clash of Kings' , 'A Dance with Dragons' ], 'tvSeries' : [ 'Season 1' , 'Season 2' , 'Season 3' , 'Season 4' , 'Season 5' , 'Season 6' ], 'playedBy' : [ 'Alfie Allen' ]}] This is just a single element and we can see that there is a nested datastructure here. The goal of this example is to reshape the data. We want a dictionary per tvSeries that has a list of all the characters that played in that season. Less Data \u00b6 Let's start by making the data just a bit simpler. We're only interested in the name and tvSeries keys. from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . head ( 3 ) . collect ()) This yields: [{ 'name' : [ 'Theon Greyjoy' ], 'tvSeries' : [ 'Season 1' , 'Season 2' , 'Season 3' , 'Season 4' , 'Season 5' , 'Season 6' ]}, { 'name' : [ 'Tyrion Lannister' ], 'tvSeries' : [ 'Season 1' , 'Season 2' , 'Season 3' , 'Season 4' , 'Season 5' , 'Season 6' ]}, { 'name' : [ 'Victarion Greyjoy' ], 'tvSeries' : [ '' ]}] That's a whole lot less data to worry about. That's nice. We now have two keys that are nested. Let's unlist both. Explode \u00b6 We can use .explode() here to explode each key here independantly. from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . head ( 15 ) . collect ()) This yields: [{ 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 1' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 2' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 3' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 4' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 5' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 6' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 1' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 2' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 3' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 4' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 5' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 6' }, { 'name' : 'Victarion Greyjoy' , 'tvSeries' : '' }, { 'name' : 'Will' , 'tvSeries' : '' }, { 'name' : 'Areo Hotah' , 'tvSeries' : 'Season 5' }] It now seems like there's a few characters that never appeared in a series. Let's remove these. Subset \u00b6 To make this subset we can use .keep() . from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . keep ( lambda d : len ( d [ 'tvSeries' ]) > 0 ) . head ( 15 ) . collect ()) This yields: [{ 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 1' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 2' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 3' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 4' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 5' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 6' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 1' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 2' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 3' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 4' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 5' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 6' }, { 'name' : 'Areo Hotah' , 'tvSeries' : 'Season 5' }, { 'name' : 'Areo Hotah' , 'tvSeries' : 'Season 6' }, { 'name' : 'Cressen' , 'tvSeries' : 'Season 2' }] Grouping \u00b6 We now want to create a collection of names per series. That means we'll first need to use .group_by() and then perform an aggregation with .agg() . from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . keep ( lambda d : len ( d [ 'tvSeries' ]) > 0 ) . group_by ( 'tvSeries' ) . agg ( names = ( 'name' , 'values' )) . head ( 2 ) . collect ()) This yields. [{ 'tvSeries' : 'Season 3' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Barristan Selmy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Catelyn Stark' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 6' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Areo Hotah' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Brandon Stark' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Eddard Stark' , 'Jon Snow' , 'Aeron Greyjoy' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}] As a final step, we'd now like to sort this per season. Sorting \u00b6 Because there's still a group active we need to remove it before using .sort() . from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . keep ( lambda d : len ( d [ 'tvSeries' ]) > 0 ) . group_by ( 'tvSeries' ) . agg ( names = ( 'name' , 'values' )) . ungroup () . sort ( lambda d : d [ 'tvSeries' ]) . collect ()) This yields: [{ 'tvSeries' : 'Season 1' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Arya Stark' , 'Barristan Selmy' , 'Brandon Stark' , 'Catelyn Stark' , 'Cersei Lannister' , 'Eddard Stark' , 'Jaime Lannister' , 'Jon Snow' , 'Kevan Lannister' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 2' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Cressen' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Catelyn Stark' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 3' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Barristan Selmy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Catelyn Stark' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 4' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Barristan Selmy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 5' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Areo Hotah' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Barristan Selmy' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 6' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Areo Hotah' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Brandon Stark' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Eddard Stark' , 'Jon Snow' , 'Aeron Greyjoy' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}]","title":"Game of Thrones"},{"location":"examples/got.html#fetching-data","text":"This library has a class method that allows you to read json. This can be data from disk, or a web url. We'll download the data and have a quick look at the contents. from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) clump . head ( 1 ) . collect () This yields: [{ 'url' : [ 'https://www.anapioficeandfire.com/api/characters/1022' ], 'id' : [ 1022 ], 'name' : [ 'Theon Greyjoy' ], 'gender' : [ 'Male' ], 'culture' : [ 'Ironborn' ], 'born' : [ 'In 278 AC or 279 AC, at Pyke' ], 'died' : [ '' ], 'alive' : [ True ], 'titles' : [ 'Prince of Winterfell' , 'Captain of Sea Bitch' , 'Lord of the Iron Islands (by law of the green lands)' ], 'aliases' : [ 'Prince of Fools' , 'Theon Turncloak' , 'Reek' , 'Theon Kinslayer' ], 'father' : [ '' ], 'mother' : [ '' ], 'spouse' : [ '' ], 'allegiances' : [ 'House Greyjoy of Pyke' ], 'books' : [ 'A Game of Thrones' , 'A Storm of Swords' , 'A Feast for Crows' ], 'povBooks' : [ 'A Clash of Kings' , 'A Dance with Dragons' ], 'tvSeries' : [ 'Season 1' , 'Season 2' , 'Season 3' , 'Season 4' , 'Season 5' , 'Season 6' ], 'playedBy' : [ 'Alfie Allen' ]}] This is just a single element and we can see that there is a nested datastructure here. The goal of this example is to reshape the data. We want a dictionary per tvSeries that has a list of all the characters that played in that season.","title":"Fetching Data"},{"location":"examples/got.html#less-data","text":"Let's start by making the data just a bit simpler. We're only interested in the name and tvSeries keys. from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . head ( 3 ) . collect ()) This yields: [{ 'name' : [ 'Theon Greyjoy' ], 'tvSeries' : [ 'Season 1' , 'Season 2' , 'Season 3' , 'Season 4' , 'Season 5' , 'Season 6' ]}, { 'name' : [ 'Tyrion Lannister' ], 'tvSeries' : [ 'Season 1' , 'Season 2' , 'Season 3' , 'Season 4' , 'Season 5' , 'Season 6' ]}, { 'name' : [ 'Victarion Greyjoy' ], 'tvSeries' : [ '' ]}] That's a whole lot less data to worry about. That's nice. We now have two keys that are nested. Let's unlist both.","title":"Less Data"},{"location":"examples/got.html#explode","text":"We can use .explode() here to explode each key here independantly. from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . head ( 15 ) . collect ()) This yields: [{ 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 1' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 2' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 3' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 4' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 5' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 6' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 1' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 2' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 3' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 4' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 5' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 6' }, { 'name' : 'Victarion Greyjoy' , 'tvSeries' : '' }, { 'name' : 'Will' , 'tvSeries' : '' }, { 'name' : 'Areo Hotah' , 'tvSeries' : 'Season 5' }] It now seems like there's a few characters that never appeared in a series. Let's remove these.","title":"Explode"},{"location":"examples/got.html#subset","text":"To make this subset we can use .keep() . from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . keep ( lambda d : len ( d [ 'tvSeries' ]) > 0 ) . head ( 15 ) . collect ()) This yields: [{ 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 1' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 2' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 3' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 4' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 5' }, { 'name' : 'Theon Greyjoy' , 'tvSeries' : 'Season 6' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 1' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 2' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 3' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 4' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 5' }, { 'name' : 'Tyrion Lannister' , 'tvSeries' : 'Season 6' }, { 'name' : 'Areo Hotah' , 'tvSeries' : 'Season 5' }, { 'name' : 'Areo Hotah' , 'tvSeries' : 'Season 6' }, { 'name' : 'Cressen' , 'tvSeries' : 'Season 2' }]","title":"Subset"},{"location":"examples/got.html#grouping","text":"We now want to create a collection of names per series. That means we'll first need to use .group_by() and then perform an aggregation with .agg() . from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . keep ( lambda d : len ( d [ 'tvSeries' ]) > 0 ) . group_by ( 'tvSeries' ) . agg ( names = ( 'name' , 'values' )) . head ( 2 ) . collect ()) This yields. [{ 'tvSeries' : 'Season 3' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Barristan Selmy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Catelyn Stark' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 6' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Areo Hotah' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Brandon Stark' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Eddard Stark' , 'Jon Snow' , 'Aeron Greyjoy' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}] As a final step, we'd now like to sort this per season.","title":"Grouping"},{"location":"examples/got.html#sorting","text":"Because there's still a group active we need to remove it before using .sort() . from clumper import Clumper clump = Clumper . read_json ( \"https://calmcode.io/datasets/got.json\" ) ( clump . select ( 'name' , 'tvSeries' ) . explode ( 'name' , 'tvSeries' ) . keep ( lambda d : len ( d [ 'tvSeries' ]) > 0 ) . group_by ( 'tvSeries' ) . agg ( names = ( 'name' , 'values' )) . ungroup () . sort ( lambda d : d [ 'tvSeries' ]) . collect ()) This yields: [{ 'tvSeries' : 'Season 1' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Arya Stark' , 'Barristan Selmy' , 'Brandon Stark' , 'Catelyn Stark' , 'Cersei Lannister' , 'Eddard Stark' , 'Jaime Lannister' , 'Jon Snow' , 'Kevan Lannister' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 2' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Cressen' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Catelyn Stark' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 3' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Barristan Selmy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Catelyn Stark' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 4' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Asha Greyjoy' , 'Barristan Selmy' , 'Brandon Stark' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 5' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Areo Hotah' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Barristan Selmy' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Jaime Lannister' , 'Jon Snow' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}, { 'tvSeries' : 'Season 6' , 'names' : [ 'Theon Greyjoy' , 'Tyrion Lannister' , 'Areo Hotah' , 'Daenerys Targaryen' , 'Davos Seaworth' , 'Arya Stark' , 'Brandon Stark' , 'Brienne of Tarth' , 'Cersei Lannister' , 'Eddard Stark' , 'Jon Snow' , 'Aeron Greyjoy' , 'Kevan Lannister' , 'Melisandre' , 'Samwell Tarly' , 'Sansa Stark' ]}]","title":"Sorting"},{"location":"examples/pytest.html","text":"Pytest has a very convenient plugin that allows you to get some insights from your pytest runs. It's called pytest-reportlog . It's a great plugin but the jsonlines that it produces do not adhere to a schema. That means that there's a great use-case for clumper. Getting the Logs \u00b6 First we need to generate the logs. In this demo I'll use the scikit-lego project as an example. From the root of the project you can install the plugin and generate the logfile via: > python -m pip install pytest-reportlog > pytest --report-log sklego-log.jsonl tests Once the sklego-log.jsonl file has been created we can explore it with clumper. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) Cleanup \u00b6 The first thing we'll need to do is the clean the collection. Not every item in the log belongs to a test-run so we will need to apply some filtering. If a dictionary does not have a \"duration\" as a key then we'll remove it from the collection. The query below does this but also demonstrates the effect. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) clump . keep ( lambda d : 'duration' in d . keys ()) To get a picture of what items we have before/after the operation it helps to also add some show() -verbs in the chain as well. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) ( clump . show ( name = \"before\" , n = 1 ) . keep ( lambda d : 'duration' in d . keys ()) . show ( name = \"after\" , n = 1 )) If you've got rich installed in your virtualenv then this is the pretty output. Information \u00b6 Given these \"after\" -dictionaries we can create a utility function that will help us aggregate data in interesting ways. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) ( clump . keep ( lambda d : 'duration' in d . keys ()) . mutate ( file = lambda d : d [ 'location' ][ 0 ], test = lambda d : d [ 'location' ][ - 1 ]) . group_by ( \"file\" ) . agg ( n = ( \"test\" , \"count\" ), duration = ( \"duration\" , \"sum\" )) . ungroup () . sort ( lambda d : - d [ 'duration' ]) . head ( 5 ) . collect ()) These are the results. [{'file': 'tests/test_estimators/test_umap_reconstruction.py', 'n': 54, 'duration': 36.16924691200256}, {'file': 'tests/test_model_selection/test_klusterfold.py', 'n': 729, 'duration': 14.112273454666138}, {'file': 'tests/test_estimators/test_basics.py', 'n': 810, 'duration': 12.211206436157227}, {'file': 'tests/test_estimators/test_gmm_naive_bayes.py', 'n': 75, 'duration': 7.968780517578125}, {'file': 'tests/test_meta/test_grouped_transformer.py', 'n': 546, 'duration': 3.5306169986724854}] This is useful information because it tells us which files cause the most time consuming parts of the test run. You can explore it further if you're also interested in zooming in on parametrized tests. Fancy Layouts \u00b6 We could take our script a step further if we wanted it to show the hierarchy. Let's nest the names of the tests in here as well. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) ( clump . keep ( lambda d : 'duration' in d . keys ()) . mutate ( file = lambda d : d [ 'location' ][ 0 ], test = lambda d : d [ 'location' ][ - 1 ]) . group_by ( \"file\" ) . agg ( n_test = ( \"test\" , \"n_unique\" ), duration = ( \"duration\" , \"sum\" ), tests = ( \"test\" , \"unique\" )) . ungroup () . sort ( lambda d : d [ 'n_test' ]) . head ( 5 ) . collect ()) These are the new results. [{'duration': 0.0018439292907714844, 'file': 'tests/test_notinstalled.py', 'n_test': 2, 'tests': ['test_uninstsalled_package_raises', 'test_installed_package_works']}, {'duration': 0.012597322463989258, 'file': 'tests/test_metrics/test_correlation_score.py', 'n_test': 2, 'tests': ['test_corr_pandas', 'test_corr_numpy']}, {'duration': 1.3311948776245117, 'file': 'tests/test_estimators/test_deadzone.py', 'n_test': 3, 'tests': ['test_values_uniform[linear]', 'test_deadzone[check_shape_remains_same_regressor]', 'test_values_uniform[quadratic]']}, {'duration': 0.0020287036895751953, 'file': 'tests/test_common/test_basics.py', 'n_test': 3, 'tests': ['test_as_list_strings', 'test_as_list_other', 'test_as_list_ints']}, {'duration': 0.029719829559326172, 'file': 'tests/test_metrics/test_equal_opportunity.py', 'n_test': 4, 'tests': ['test_p_percent_numpy', 'test_p_percent_pandas_multiclass', 'test_equal_opportunity_pandas', 'test_warning_is_logged']}]","title":"Pytest Reports"},{"location":"examples/pytest.html#getting-the-logs","text":"First we need to generate the logs. In this demo I'll use the scikit-lego project as an example. From the root of the project you can install the plugin and generate the logfile via: > python -m pip install pytest-reportlog > pytest --report-log sklego-log.jsonl tests Once the sklego-log.jsonl file has been created we can explore it with clumper. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" )","title":"Getting the Logs"},{"location":"examples/pytest.html#cleanup","text":"The first thing we'll need to do is the clean the collection. Not every item in the log belongs to a test-run so we will need to apply some filtering. If a dictionary does not have a \"duration\" as a key then we'll remove it from the collection. The query below does this but also demonstrates the effect. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) clump . keep ( lambda d : 'duration' in d . keys ()) To get a picture of what items we have before/after the operation it helps to also add some show() -verbs in the chain as well. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) ( clump . show ( name = \"before\" , n = 1 ) . keep ( lambda d : 'duration' in d . keys ()) . show ( name = \"after\" , n = 1 )) If you've got rich installed in your virtualenv then this is the pretty output.","title":"Cleanup"},{"location":"examples/pytest.html#information","text":"Given these \"after\" -dictionaries we can create a utility function that will help us aggregate data in interesting ways. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) ( clump . keep ( lambda d : 'duration' in d . keys ()) . mutate ( file = lambda d : d [ 'location' ][ 0 ], test = lambda d : d [ 'location' ][ - 1 ]) . group_by ( \"file\" ) . agg ( n = ( \"test\" , \"count\" ), duration = ( \"duration\" , \"sum\" )) . ungroup () . sort ( lambda d : - d [ 'duration' ]) . head ( 5 ) . collect ()) These are the results. [{'file': 'tests/test_estimators/test_umap_reconstruction.py', 'n': 54, 'duration': 36.16924691200256}, {'file': 'tests/test_model_selection/test_klusterfold.py', 'n': 729, 'duration': 14.112273454666138}, {'file': 'tests/test_estimators/test_basics.py', 'n': 810, 'duration': 12.211206436157227}, {'file': 'tests/test_estimators/test_gmm_naive_bayes.py', 'n': 75, 'duration': 7.968780517578125}, {'file': 'tests/test_meta/test_grouped_transformer.py', 'n': 546, 'duration': 3.5306169986724854}] This is useful information because it tells us which files cause the most time consuming parts of the test run. You can explore it further if you're also interested in zooming in on parametrized tests.","title":"Information"},{"location":"examples/pytest.html#fancy-layouts","text":"We could take our script a step further if we wanted it to show the hierarchy. Let's nest the names of the tests in here as well. from clumper import Clumper clump = Clumper . read_jsonl ( \"tests/data/docs/sklego-log.jsonl\" ) ( clump . keep ( lambda d : 'duration' in d . keys ()) . mutate ( file = lambda d : d [ 'location' ][ 0 ], test = lambda d : d [ 'location' ][ - 1 ]) . group_by ( \"file\" ) . agg ( n_test = ( \"test\" , \"n_unique\" ), duration = ( \"duration\" , \"sum\" ), tests = ( \"test\" , \"unique\" )) . ungroup () . sort ( lambda d : d [ 'n_test' ]) . head ( 5 ) . collect ()) These are the new results. [{'duration': 0.0018439292907714844, 'file': 'tests/test_notinstalled.py', 'n_test': 2, 'tests': ['test_uninstsalled_package_raises', 'test_installed_package_works']}, {'duration': 0.012597322463989258, 'file': 'tests/test_metrics/test_correlation_score.py', 'n_test': 2, 'tests': ['test_corr_pandas', 'test_corr_numpy']}, {'duration': 1.3311948776245117, 'file': 'tests/test_estimators/test_deadzone.py', 'n_test': 3, 'tests': ['test_values_uniform[linear]', 'test_deadzone[check_shape_remains_same_regressor]', 'test_values_uniform[quadratic]']}, {'duration': 0.0020287036895751953, 'file': 'tests/test_common/test_basics.py', 'n_test': 3, 'tests': ['test_as_list_strings', 'test_as_list_other', 'test_as_list_ints']}, {'duration': 0.029719829559326172, 'file': 'tests/test_metrics/test_equal_opportunity.py', 'n_test': 4, 'tests': ['test_p_percent_numpy', 'test_p_percent_pandas_multiclass', 'test_equal_opportunity_pandas', 'test_warning_is_logged']}]","title":"Fancy Layouts"},{"location":"guides/faq.html","text":"Usecase \u00b6 When should I use Clumper ? \u00b6 This package might solve some problems for you if: You're dealing with nested data. You're dealing with data that's not super big. You enjoy using a functional-style of exploring data. You're on a lightweight machine (like a Raspberry Pi) and don't want dependencies that need to compile first. When should I not use Clumper ? \u00b6 This package might not be the best choice if: You're dealing with very large datasets. You're dealing with data thats like a table. For unnested tables, pandas is probably better. Library Assumptions \u00b6 How does Clumper deal with missing data? \u00b6 If your datastructure represents a table with rows and columns then you'd usually denote missing data via something like NA or NaN . This is common in SQL but also in numeric libraries like numpy . Since this library tries to focus on json-like data-structures we also deal with it differently. If you'd be dealing with a csv, you'd consider this example to contain missing data. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 , \"a\" : None }, { \"r\" : 3 , \"a\" : 2.5 } ] Instead, this is how Clumper would represent it. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 }, { \"r\" : 3 , \"a\" : 2.5 } ] In this case we have an item where the key \"a\" is acutally missing. In the previous example we definately had a key but the value was equal to None . Am I limited to dictionaries? \u00b6 Although this library has lists of dictionaries in mind, we actually don't force this on you. We just assume a sequence as input. From here it's your responsibility to come up with reasonable lambda functions for the verbs that follow. Most verbs are flexible enough that they don't assume the lambda functions to act on dictionaries. For example. If you look at this code: .sort(lambda d: d) Then you can infer that we're sorting based on whatever the value in our collection is. It would work on a list of integers, floats or characters. If you'd instead have: .sort(lambda d: d[0]) Then it wouldn't work anymore if d is a integer, float or string but it would work if d is a list, tuple or a dictionary with a key of 0 available. Integer Example \u00b6 Here we take the top 50 numbers from a list and then sort. from clumper import Clumper ( Clumper ( range ( 100 )) . head ( 50 ) . sort ( lambda d : d , reverse = True )) Neither .head() nor .sort() makes an assumption of the contents of the Clumper collection. Pay attention though that the lambda function inside of .sort() is appropriate for the data in the collection. Character Example \u00b6 Here we start out with a sequence of letters and we turn it into a collection of dictionaries. from clumper import Clumper ( Clumper ( 'abcedfghijklmnopqrstuvwxyz' ) . map ( lambda c : { 'char' : c , 'ord' : ord ( c )})) Verbs that need Dictionaries \u00b6 There's a short list of verbs that carry some restrictions The .select() verb needs to select keys so the sequences must contain dictionaries The .drop() verb needs to remove keys so the sequences must contain dictionaries The .agg()/.transform() verbs need a collection of dictionaries to construct aggregations. If you really need this feature for non-dictionary sequences consider the .reduce() method. The .mutate() verb is really flexible in terms of input that it accepts but it will always produce a dictionary as output. If you really need a non-dictionary output, consider the map() method.","title":"FAQ"},{"location":"guides/faq.html#usecase","text":"","title":"Usecase"},{"location":"guides/faq.html#when-should-i-use-clumper","text":"This package might solve some problems for you if: You're dealing with nested data. You're dealing with data that's not super big. You enjoy using a functional-style of exploring data. You're on a lightweight machine (like a Raspberry Pi) and don't want dependencies that need to compile first.","title":"When should I use Clumper?"},{"location":"guides/faq.html#when-should-i-not-use-clumper","text":"This package might not be the best choice if: You're dealing with very large datasets. You're dealing with data thats like a table. For unnested tables, pandas is probably better.","title":"When should I not use Clumper?"},{"location":"guides/faq.html#library-assumptions","text":"","title":"Library Assumptions"},{"location":"guides/faq.html#how-does-clumper-deal-with-missing-data","text":"If your datastructure represents a table with rows and columns then you'd usually denote missing data via something like NA or NaN . This is common in SQL but also in numeric libraries like numpy . Since this library tries to focus on json-like data-structures we also deal with it differently. If you'd be dealing with a csv, you'd consider this example to contain missing data. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 , \"a\" : None }, { \"r\" : 3 , \"a\" : 2.5 } ] Instead, this is how Clumper would represent it. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 }, { \"r\" : 3 , \"a\" : 2.5 } ] In this case we have an item where the key \"a\" is acutally missing. In the previous example we definately had a key but the value was equal to None .","title":"How does Clumper deal with missing data?"},{"location":"guides/faq.html#am-i-limited-to-dictionaries","text":"Although this library has lists of dictionaries in mind, we actually don't force this on you. We just assume a sequence as input. From here it's your responsibility to come up with reasonable lambda functions for the verbs that follow. Most verbs are flexible enough that they don't assume the lambda functions to act on dictionaries. For example. If you look at this code: .sort(lambda d: d) Then you can infer that we're sorting based on whatever the value in our collection is. It would work on a list of integers, floats or characters. If you'd instead have: .sort(lambda d: d[0]) Then it wouldn't work anymore if d is a integer, float or string but it would work if d is a list, tuple or a dictionary with a key of 0 available.","title":"Am I limited to dictionaries?"},{"location":"guides/faq.html#integer-example","text":"Here we take the top 50 numbers from a list and then sort. from clumper import Clumper ( Clumper ( range ( 100 )) . head ( 50 ) . sort ( lambda d : d , reverse = True )) Neither .head() nor .sort() makes an assumption of the contents of the Clumper collection. Pay attention though that the lambda function inside of .sort() is appropriate for the data in the collection.","title":"Integer Example"},{"location":"guides/faq.html#character-example","text":"Here we start out with a sequence of letters and we turn it into a collection of dictionaries. from clumper import Clumper ( Clumper ( 'abcedfghijklmnopqrstuvwxyz' ) . map ( lambda c : { 'char' : c , 'ord' : ord ( c )}))","title":"Character Example"},{"location":"guides/faq.html#verbs-that-need-dictionaries","text":"There's a short list of verbs that carry some restrictions The .select() verb needs to select keys so the sequences must contain dictionaries The .drop() verb needs to remove keys so the sequences must contain dictionaries The .agg()/.transform() verbs need a collection of dictionaries to construct aggregations. If you really need this feature for non-dictionary sequences consider the .reduce() method. The .mutate() verb is really flexible in terms of input that it accepts but it will always produce a dictionary as output. If you really need a non-dictionary output, consider the map() method.","title":"Verbs that need Dictionaries"},{"location":"guides/getting-started.html","text":"Getting Started \u00b6 This library offers tools to deal with nested json data structure. To demonstrate how it might work we'll download a dataset locally. It's a list of dictionaries that contains information about pokemon. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib . request . urlopen ( url ) as f : pokemon = json . loads ( f . read ()) Here's the first two examples from this list; [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}] There's about 800 dictionaries in our list. This is big enough to not want to go through manually but also small enough that we don't need to worry too much about performance. Example \u00b6 Let's run a basic example. from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) This is the result of this query. [{'name': 'Diglett', 'type': 'Ground', 'ratio': 5.5}, {'name': 'DeoxysAttack Forme', 'type': 'Psychic', 'ratio': 3.6}, {'name': 'Krabby', 'type': 'Water', 'ratio': 3.5}, {'name': 'DeoxysNormal Forme', 'type': 'Psychic', 'ratio': 3.0}, {'name': 'BanetteMega Banette', 'type': 'Ghost', 'ratio': 2.578125}] Here's what the code did. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper collection. It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. These dictionaries will also get a property called ratio which is the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. Design \u00b6 The idea behind the library is that the API is like the English language. We could say that the dataset is like a noun and that each method is like a verb . Each verb will tell the API what needs to happen to the data and the input to the verb will tell you how this will happen. For example, the .keep() method will filter out data and how it will filter data is explained by the lambda function that we pass in. The idea is that most analyses that you'd be interested in doing can be constructed using just these verbs. You can see a detailed view of how to use all the verbs in the api description . We did not come up with this way of thinking about data analysis. In fact, this library is heavily inspired by the dplyr library in R . What are Verbs? \u00b6 In this library verbs are special kinds of methods. They really are just methods in essense but they imply a general pattern. In Clumper , a verb is a method that; Always returns a Clumper back, so it's chain-able. Has a name that tells you what is happening to the data while the parameters tell you how it is changing the data. This combination of properties allows you to write code in the same way you'd explain the steps to a human. Take this code for example. from clumper import Clumper list_of_dicts = [ { 'a' : 7 , 'b' : 2 }, { 'a' : 2 , 'b' : 4 }, { 'a' : 3 , 'b' : 6 } ] ( Clumper ( list_of_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ]) . sort ( lambda d : d [ 'c' ])) Schematically, this is what the code does. Step 1 \u00b6 First we use the mutate verb. This allows us to add values to pairs in our collection. The output of this step is another Clumper collection. Step 2 \u00b6 Next we pick up the mutated collection and we apply a sort to it. Again, the output of this another Clumper . This means that we can keep adding steps as we further our analysis. Method Chaining \u00b6 This style of programming is really powerful and it keeps you productive once you've gotten a hang of the lambda functions. The lambda functions that you pass in can be general python. This also means that you're free to use nested dictionaries, sets or whatever you like doing in python.","title":"Getting Started"},{"location":"guides/getting-started.html#getting-started","text":"This library offers tools to deal with nested json data structure. To demonstrate how it might work we'll download a dataset locally. It's a list of dictionaries that contains information about pokemon. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib . request . urlopen ( url ) as f : pokemon = json . loads ( f . read ()) Here's the first two examples from this list; [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}] There's about 800 dictionaries in our list. This is big enough to not want to go through manually but also small enough that we don't need to worry too much about performance.","title":"Getting Started"},{"location":"guides/getting-started.html#example","text":"Let's run a basic example. from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) This is the result of this query. [{'name': 'Diglett', 'type': 'Ground', 'ratio': 5.5}, {'name': 'DeoxysAttack Forme', 'type': 'Psychic', 'ratio': 3.6}, {'name': 'Krabby', 'type': 'Water', 'ratio': 3.5}, {'name': 'DeoxysNormal Forme', 'type': 'Psychic', 'ratio': 3.0}, {'name': 'BanetteMega Banette', 'type': 'Ghost', 'ratio': 2.578125}] Here's what the code did. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper collection. It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. These dictionaries will also get a property called ratio which is the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries.","title":"Example"},{"location":"guides/getting-started.html#design","text":"The idea behind the library is that the API is like the English language. We could say that the dataset is like a noun and that each method is like a verb . Each verb will tell the API what needs to happen to the data and the input to the verb will tell you how this will happen. For example, the .keep() method will filter out data and how it will filter data is explained by the lambda function that we pass in. The idea is that most analyses that you'd be interested in doing can be constructed using just these verbs. You can see a detailed view of how to use all the verbs in the api description . We did not come up with this way of thinking about data analysis. In fact, this library is heavily inspired by the dplyr library in R .","title":"Design"},{"location":"guides/getting-started.html#what-are-verbs","text":"In this library verbs are special kinds of methods. They really are just methods in essense but they imply a general pattern. In Clumper , a verb is a method that; Always returns a Clumper back, so it's chain-able. Has a name that tells you what is happening to the data while the parameters tell you how it is changing the data. This combination of properties allows you to write code in the same way you'd explain the steps to a human. Take this code for example. from clumper import Clumper list_of_dicts = [ { 'a' : 7 , 'b' : 2 }, { 'a' : 2 , 'b' : 4 }, { 'a' : 3 , 'b' : 6 } ] ( Clumper ( list_of_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ]) . sort ( lambda d : d [ 'c' ])) Schematically, this is what the code does.","title":"What are Verbs?"},{"location":"guides/getting-started.html#step-1","text":"First we use the mutate verb. This allows us to add values to pairs in our collection. The output of this step is another Clumper collection.","title":"Step 1"},{"location":"guides/getting-started.html#step-2","text":"Next we pick up the mutated collection and we apply a sort to it. Again, the output of this another Clumper . This means that we can keep adding steps as we further our analysis.","title":"Step 2"},{"location":"guides/getting-started.html#method-chaining","text":"This style of programming is really powerful and it keeps you productive once you've gotten a hang of the lambda functions. The lambda functions that you pass in can be general python. This also means that you're free to use nested dictionaries, sets or whatever you like doing in python.","title":"Method Chaining"},{"location":"guides/releases.html","text":"Releases \u00b6 This page lists the releases as well as the features that were added. Version 0.2.11 \u00b6 Improved the docs. Added a new example. Changed the behavior for show . Name no longer 1st argument. Version 0.2.10 \u00b6 Added the add_path option on all .read_<type> methods. Fixed a small bug for the show verb. Version 0.2.9 \u00b6 Added the show verb. Version 0.2.8 \u00b6 Added unpack verb. Version 0.2.7 \u00b6 Added explode verb. Version 0.2.6 \u00b6 Added read_yaml , write_yaml . Added flatten_keys . All readers now accept wildcards. Version 0.2.5 \u00b6 Added read_json , read_jsonl and read_csv methods to Clumper class. Version 0.2.4 \u00b6 Clumper was announced to the public.","title":"Releases"},{"location":"guides/releases.html#releases","text":"This page lists the releases as well as the features that were added.","title":"Releases"},{"location":"guides/releases.html#version-0211","text":"Improved the docs. Added a new example. Changed the behavior for show . Name no longer 1st argument.","title":"Version 0.2.11"},{"location":"guides/releases.html#version-0210","text":"Added the add_path option on all .read_<type> methods. Fixed a small bug for the show verb.","title":"Version 0.2.10"},{"location":"guides/releases.html#version-029","text":"Added the show verb.","title":"Version 0.2.9"},{"location":"guides/releases.html#version-028","text":"Added unpack verb.","title":"Version 0.2.8"},{"location":"guides/releases.html#version-027","text":"Added explode verb.","title":"Version 0.2.7"},{"location":"guides/releases.html#version-026","text":"Added read_yaml , write_yaml . Added flatten_keys . All readers now accept wildcards.","title":"Version 0.2.6"},{"location":"guides/releases.html#version-025","text":"Added read_json , read_jsonl and read_csv methods to Clumper class.","title":"Version 0.2.5"},{"location":"guides/releases.html#version-024","text":"Clumper was announced to the public.","title":"Version 0.2.4"},{"location":"guides/summary-methods.html","text":"The Clumper object also offers useful methods that aren't verbs. Summary Methods \u00b6 Here's a sample of useful methods to get summaries from your collection. Each of these methods has a string equivalent that is used in .agg() when making aggregations. We'll list a few common ones here but take note: all of these are methods that ignore the grouping . If you want to use these methods with grouping, use .agg() instead. .mean() \u00b6 You can calculate the mean of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . mean ( \"a\" ) Clumper ( list_of_dicts ) . mean ( \"b\" ) .count() \u00b6 You can count the number of rows for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . count ( \"a\" ) Clumper ( list_of_dicts ) . count ( \"b\" ) .unique() \u00b6 You can retrieve all unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . unique ( \"a\" ) Clumper ( list_of_dicts ) . unique ( \"b\" ) .n_unique() \u00b6 You can the retrieve the number of unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . n_unique ( \"a\" ) Clumper ( list_of_dicts ) . n_unique ( \"b\" ) .sum() \u00b6 You can calculate the sum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" ) .min() \u00b6 You can calculate the minimum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . min ( \"a\" ) Clumper ( list_of_dicts ) . min ( \"b\" ) .max() \u00b6 You can calculate the maximum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . max ( \"a\" ) Clumper ( list_of_dicts ) . max ( \"b\" ) More? \u00b6 If you'd like to see more information these methods check the API of the Clumper object. That's where you'll find them.","title":"Summary Methods"},{"location":"guides/summary-methods.html#summary-methods","text":"Here's a sample of useful methods to get summaries from your collection. Each of these methods has a string equivalent that is used in .agg() when making aggregations. We'll list a few common ones here but take note: all of these are methods that ignore the grouping . If you want to use these methods with grouping, use .agg() instead.","title":"Summary Methods"},{"location":"guides/summary-methods.html#mean","text":"You can calculate the mean of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . mean ( \"a\" ) Clumper ( list_of_dicts ) . mean ( \"b\" )","title":".mean()"},{"location":"guides/summary-methods.html#count","text":"You can count the number of rows for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . count ( \"a\" ) Clumper ( list_of_dicts ) . count ( \"b\" )","title":".count()"},{"location":"guides/summary-methods.html#unique","text":"You can retrieve all unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . unique ( \"a\" ) Clumper ( list_of_dicts ) . unique ( \"b\" )","title":".unique()"},{"location":"guides/summary-methods.html#n_unique","text":"You can the retrieve the number of unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . n_unique ( \"a\" ) Clumper ( list_of_dicts ) . n_unique ( \"b\" )","title":".n_unique()"},{"location":"guides/summary-methods.html#sum","text":"You can calculate the sum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" )","title":".sum()"},{"location":"guides/summary-methods.html#min","text":"You can calculate the minimum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . min ( \"a\" ) Clumper ( list_of_dicts ) . min ( \"b\" )","title":".min()"},{"location":"guides/summary-methods.html#max","text":"You can calculate the maximum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . max ( \"a\" ) Clumper ( list_of_dicts ) . max ( \"b\" )","title":".max()"},{"location":"guides/summary-methods.html#more","text":"If you'd like to see more information these methods check the API of the Clumper object. That's where you'll find them.","title":"More?"},{"location":"guides/understanding-groups.html","text":"If a group is present on a Clumper then the behavior of some of the verbs will change. This guide will explain what changes you can expect and why they are useful. What is a Group? \u00b6 You can add a group to a Clumper by calling .group_by() . from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' )) The current group is now looking at all the items that have grp as a key. This means that the collection is now aware that you're interested in calculating things per group. In this case you'd get two groups. One for {'grp': 'a'} and one for {'grp': 'b'} . There are some verbs that will behave differently because of this. Agg \u00b6 Without Groups \u00b6 When you don't have a group active then we'll make a single summary for the entire collection of items. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ()) With Groups \u00b6 When there is a group active then we'll make a summary per group. We'll also ensure that the keys of the relevant groups are made available in the new collection. Note that the group is still active! from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ()) Aggergators \u00b6 You can use your own functions if you want to do aggregation but we offer a few standard ones. Here's the standard mapping. { \"mean\" : mean , \"count\" : lambda d : len ( d ), \"unique\" : lambda d : list ( set ( d )), \"n_unique\" : lambda d : len ( set ( d )), \"sum\" : sum , \"min\" : min , \"max\" : max , \"median\" : median , \"var\" : variance , \"std\" : stdev , \"values\" : lambda d : d , \"first\" : lambda d : d [ 0 ], \"last\" : lambda d : d [ - 1 ], } Transform \u00b6 The .transform() verb is similar to the .agg() verb. The main difference is that it does not reduce any rows/keys during aggregation. Instead they are merged back in with the original collection. The examples below should help explain what the usecase is. Without Groups \u00b6 With no groups active we just attach the same summary to every item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ()) With Groups \u00b6 With groups active we calculate a summary per group and only attach the relevant summary to each item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ()) Mutate \u00b6 This library offers stateful functions like row_number . If you use these functions while there is a group active you'll notice different behavior. Without Groups \u00b6 When there is no group we just start counting at one and we continue counting until we're at the end of the collection. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ()) With Groups \u00b6 Because there are groups you'll notice that the order is different but also that the row_number resets when seeing the new group. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . mutate ( r = row_number ()) . collect ()) Sort \u00b6 Without Groups \u00b6 With no groups active, we just sort the entire collection based on the key that is provided. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . sort ( key = lambda d : d [ 'a' ]) . collect ()) With Groups \u00b6 With groups active, still perform the sorting but only within each group. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . sort ( key = lambda d : d [ 'a' ]) . collect ()) Ungroup \u00b6 If you're done with a group and you'd like to move on you can drop all groups by calling .ungroup() .","title":"About Groups"},{"location":"guides/understanding-groups.html#what-is-a-group","text":"You can add a group to a Clumper by calling .group_by() . from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' )) The current group is now looking at all the items that have grp as a key. This means that the collection is now aware that you're interested in calculating things per group. In this case you'd get two groups. One for {'grp': 'a'} and one for {'grp': 'b'} . There are some verbs that will behave differently because of this.","title":"What is a Group?"},{"location":"guides/understanding-groups.html#agg","text":"","title":"Agg"},{"location":"guides/understanding-groups.html#without-groups","text":"When you don't have a group active then we'll make a single summary for the entire collection of items. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups","text":"When there is a group active then we'll make a summary per group. We'll also ensure that the keys of the relevant groups are made available in the new collection. Note that the group is still active! from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#aggergators","text":"You can use your own functions if you want to do aggregation but we offer a few standard ones. Here's the standard mapping. { \"mean\" : mean , \"count\" : lambda d : len ( d ), \"unique\" : lambda d : list ( set ( d )), \"n_unique\" : lambda d : len ( set ( d )), \"sum\" : sum , \"min\" : min , \"max\" : max , \"median\" : median , \"var\" : variance , \"std\" : stdev , \"values\" : lambda d : d , \"first\" : lambda d : d [ 0 ], \"last\" : lambda d : d [ - 1 ], }","title":"Aggergators"},{"location":"guides/understanding-groups.html#transform","text":"The .transform() verb is similar to the .agg() verb. The main difference is that it does not reduce any rows/keys during aggregation. Instead they are merged back in with the original collection. The examples below should help explain what the usecase is.","title":"Transform"},{"location":"guides/understanding-groups.html#without-groups_1","text":"With no groups active we just attach the same summary to every item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups_1","text":"With groups active we calculate a summary per group and only attach the relevant summary to each item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#mutate","text":"This library offers stateful functions like row_number . If you use these functions while there is a group active you'll notice different behavior.","title":"Mutate"},{"location":"guides/understanding-groups.html#without-groups_2","text":"When there is no group we just start counting at one and we continue counting until we're at the end of the collection. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups_2","text":"Because there are groups you'll notice that the order is different but also that the row_number resets when seeing the new group. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . mutate ( r = row_number ()) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#sort","text":"","title":"Sort"},{"location":"guides/understanding-groups.html#without-groups_3","text":"With no groups active, we just sort the entire collection based on the key that is provided. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . sort ( key = lambda d : d [ 'a' ]) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups_3","text":"With groups active, still perform the sorting but only within each group. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . sort ( key = lambda d : d [ 'a' ]) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#ungroup","text":"If you're done with a group and you'd like to move on you can drop all groups by calling .ungroup() .","title":"Ungroup"},{"location":"guides/understanding-joins.html","text":"Sometimes you'd like to merge two collections into one. There are a few ways of doing that in this library. Concat \u00b6 If you just want to stack collections on top of each other, you can use concat for that. It's short for \"concatenate\". from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3 Joins \u00b6 If you want to merge two collections together based on the values then you'd be interested in a join . When doing a join there are two sets: a leftset and a right set. Depending on the type of join that you are performing you will get different behavior. Left Join \u00b6 A left join keeps all the values from the left table even when there's nothing from the right table that it can join on. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected ) Note that items on the left hand side may appear multiple times. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, { \"c\" : 9 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { 'a' : 1 , 'b' : 4 , 'c' : 9 }, { 'a' : 2 , 'b' : 6 , 'c' : 7 }, { 'a' : 2 , 'b' : 6 , 'c' : 9 }, { 'a' : 3 , 'b' : 8 } ] assert result . equals ( expected ) Right Join \u00b6 This is not implemented. You can swap the left/right tables and still use the left-join for this. Inner Join \u00b6 An inner join only keeps items that can be paired in both tables. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected )","title":"Merge Verbs"},{"location":"guides/understanding-joins.html#concat","text":"If you just want to stack collections on top of each other, you can use concat for that. It's short for \"concatenate\". from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3","title":"Concat"},{"location":"guides/understanding-joins.html#joins","text":"If you want to merge two collections together based on the values then you'd be interested in a join . When doing a join there are two sets: a leftset and a right set. Depending on the type of join that you are performing you will get different behavior.","title":"Joins"},{"location":"guides/understanding-joins.html#left-join","text":"A left join keeps all the values from the left table even when there's nothing from the right table that it can join on. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected ) Note that items on the left hand side may appear multiple times. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, { \"c\" : 9 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { 'a' : 1 , 'b' : 4 , 'c' : 9 }, { 'a' : 2 , 'b' : 6 , 'c' : 7 }, { 'a' : 2 , 'b' : 6 , 'c' : 9 }, { 'a' : 3 , 'b' : 8 } ] assert result . equals ( expected )","title":"Left Join"},{"location":"guides/understanding-joins.html#right-join","text":"This is not implemented. You can swap the left/right tables and still use the left-join for this.","title":"Right Join"},{"location":"guides/understanding-joins.html#inner-join","text":"An inner join only keeps items that can be paired in both tables. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected )","title":"Inner Join"},{"location":"guides/understanding-reshaping.html","text":"Because sequences of nested data really come in all sorts of shapes and sizes this library offers verbs to help you reshape the data into different formats. This document will demonstrate how these verbs work. Explode \u00b6 Sometimes you'll have data that is nested as a list of values. If you'd like to expand such a list of values you can use .explode() . from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) assert clumper . equals ([{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }]) new_data = Clumper ( data ) . explode ( item = \"items\" ) . collect () assert clumper . equals ([{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }]) Note how the syntax allows you to either explode the values, assigning them to the old keyname or to directly rename this field. You can also pass multiple keys in a single command. from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ], 'values' :[ 3 , 4 ]}] clumper = Clumper ( data ) . explode ( \"items\" , \"values\" ) expected = [ { 'a' : 1 , 'items' : 1 , 'values' : 3 }, { 'a' : 1 , 'items' : 1 , 'values' : 4 }, { 'a' : 1 , 'items' : 2 , 'values' : 3 }, { 'a' : 1 , 'items' : 2 , 'values' : 4 } ] assert clumper . equals ( expected ) new_data = Clumper ( data ) . explode ( item = \"items\" , val = \"values\" ) . collect () expected = [ { 'a' : 1 , 'item' : 1 , 'val' : 3 }, { 'a' : 1 , 'item' : 1 , 'val' : 4 }, { 'a' : 1 , 'item' : 2 , 'val' : 3 }, { 'a' : 1 , 'item' : 2 , 'val' : 4 } ] assert clumper . equals ( expected ) Unpack \u00b6 The unpack verb is very similar to explode but here we expect a list of dictionaries as opposed to a list of values. from clumper import Clumper list_dicts = { 'a' : 1 , 'rows' : [{ 'b' : 2 , 'c' : 3 }, { 'b' : 3 }, { 'b' : 4 }] } result = Clumper ( list_dicts ) . unpack ( 'rows' ) . collect () expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 }, { 'a' : 1 , 'b' : 3 }, { 'a' : 1 , 'b' : 4 } ] assert result == expected Single Dictionaries \u00b6 Sometimes you're dealing with json data that isn't a list of dictionaries. You should be aware that you may want to read in the data differently. You can keep the data as a dictionary or automatically wrap it as a list by tweaking the listify parameter. This is available on every .read_<format> -method. Listify = True \u00b6 from clumper import Clumper example1 = Clumper . read_yaml ( \"tests/data/demo-nested.yml\" ) expected1 = [ { 'nested1' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ], 'nested2' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ] } ] assert example1 . equals ( expected1 ) Listify = False \u00b6 from clumper import Clumper example2 = Clumper . read_yaml ( \"tests/data/demo-nested.yml\" , listify = False ) expected2 = { 'nested1' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ], 'nested2' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ] } assert example2 . equals ( expected2 ) Flatten Keys \u00b6 In the \"list-like dictionary\" scenarios you might want to use .flatten_keys . This method flattens the keys in the data. from clumper import Clumper data = { 'feature_1' : { 'propery_1' : 1 , 'property_2' : 2 }, 'feature_2' : { 'propery_1' : 3 , 'property_2' : 4 }, 'feature_3' : { 'propery_1' : 5 , 'property_2' : 6 }, } expected = [ { 'propery_1' : 1 , 'property_2' : 2 , 'key' : 'feature_1' }, { 'propery_1' : 3 , 'property_2' : 4 , 'key' : 'feature_2' }, { 'propery_1' : 5 , 'property_2' : 6 , 'key' : 'feature_3' } ] assert Clumper ( data , listify = False ) . flatten_keys () . collect () == expected Show \u00b6 Getting the verbs right can be trick. So we've also added a show verb which can be useful while debugging. It requires rich to be manually installed beforehand if you want to see the pretty colors in the output. from clumper import Clumper data = [{ \"n\" : 123 , \"data\" : [ 1 , 2 , 3 ], \"maintainer\" : \"Vincent\" }] Clumper ( data ) . show ( \"Before\" , n = 1 ) . explode ( \"data\" ) . show ( \"After\" , n = 3 )","title":"Nested Data"},{"location":"guides/understanding-reshaping.html#explode","text":"Sometimes you'll have data that is nested as a list of values. If you'd like to expand such a list of values you can use .explode() . from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) assert clumper . equals ([{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }]) new_data = Clumper ( data ) . explode ( item = \"items\" ) . collect () assert clumper . equals ([{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }]) Note how the syntax allows you to either explode the values, assigning them to the old keyname or to directly rename this field. You can also pass multiple keys in a single command. from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ], 'values' :[ 3 , 4 ]}] clumper = Clumper ( data ) . explode ( \"items\" , \"values\" ) expected = [ { 'a' : 1 , 'items' : 1 , 'values' : 3 }, { 'a' : 1 , 'items' : 1 , 'values' : 4 }, { 'a' : 1 , 'items' : 2 , 'values' : 3 }, { 'a' : 1 , 'items' : 2 , 'values' : 4 } ] assert clumper . equals ( expected ) new_data = Clumper ( data ) . explode ( item = \"items\" , val = \"values\" ) . collect () expected = [ { 'a' : 1 , 'item' : 1 , 'val' : 3 }, { 'a' : 1 , 'item' : 1 , 'val' : 4 }, { 'a' : 1 , 'item' : 2 , 'val' : 3 }, { 'a' : 1 , 'item' : 2 , 'val' : 4 } ] assert clumper . equals ( expected )","title":"Explode"},{"location":"guides/understanding-reshaping.html#unpack","text":"The unpack verb is very similar to explode but here we expect a list of dictionaries as opposed to a list of values. from clumper import Clumper list_dicts = { 'a' : 1 , 'rows' : [{ 'b' : 2 , 'c' : 3 }, { 'b' : 3 }, { 'b' : 4 }] } result = Clumper ( list_dicts ) . unpack ( 'rows' ) . collect () expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 }, { 'a' : 1 , 'b' : 3 }, { 'a' : 1 , 'b' : 4 } ] assert result == expected","title":"Unpack"},{"location":"guides/understanding-reshaping.html#single-dictionaries","text":"Sometimes you're dealing with json data that isn't a list of dictionaries. You should be aware that you may want to read in the data differently. You can keep the data as a dictionary or automatically wrap it as a list by tweaking the listify parameter. This is available on every .read_<format> -method.","title":"Single Dictionaries"},{"location":"guides/understanding-reshaping.html#listify-true","text":"from clumper import Clumper example1 = Clumper . read_yaml ( \"tests/data/demo-nested.yml\" ) expected1 = [ { 'nested1' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ], 'nested2' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ] } ] assert example1 . equals ( expected1 )","title":"Listify = True"},{"location":"guides/understanding-reshaping.html#listify-false","text":"from clumper import Clumper example2 = Clumper . read_yaml ( \"tests/data/demo-nested.yml\" , listify = False ) expected2 = { 'nested1' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ], 'nested2' : [ { 'item' : 1 , 'value' : 'a' }, { 'item' : 2 , 'value' : 'b' }, { 'item' : 3 , 'value' : 'c' } ] } assert example2 . equals ( expected2 )","title":"Listify = False"},{"location":"guides/understanding-reshaping.html#flatten-keys","text":"In the \"list-like dictionary\" scenarios you might want to use .flatten_keys . This method flattens the keys in the data. from clumper import Clumper data = { 'feature_1' : { 'propery_1' : 1 , 'property_2' : 2 }, 'feature_2' : { 'propery_1' : 3 , 'property_2' : 4 }, 'feature_3' : { 'propery_1' : 5 , 'property_2' : 6 }, } expected = [ { 'propery_1' : 1 , 'property_2' : 2 , 'key' : 'feature_1' }, { 'propery_1' : 3 , 'property_2' : 4 , 'key' : 'feature_2' }, { 'propery_1' : 5 , 'property_2' : 6 , 'key' : 'feature_3' } ] assert Clumper ( data , listify = False ) . flatten_keys () . collect () == expected","title":"Flatten Keys"},{"location":"guides/understanding-reshaping.html#show","text":"Getting the verbs right can be trick. So we've also added a show verb which can be useful while debugging. It requires rich to be manually installed beforehand if you want to see the pretty colors in the output. from clumper import Clumper data = [{ \"n\" : 123 , \"data\" : [ 1 , 2 , 3 ], \"maintainer\" : \"Vincent\" }] Clumper ( data ) . show ( \"Before\" , n = 1 ) . explode ( \"data\" ) . show ( \"After\" , n = 3 )","title":"Show"},{"location":"guides/verbs.html","text":"Here's a list of the common verbs that you'll most likely use the most. Keep \u00b6 The keep verb allows you to grab a subset from the original collection. Base Example \u00b6 Here's a basic example of what keep does. from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected ) Dropping Missing Values \u00b6 Libraries like pandas offer verbs like .dropna() . This library does not because we handle missing values differently. If you've got a collection with a missing value then you can simply remove it via .keep() though. from clumper import Clumper data = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, { \"a\" : 4 }, ] clump = Clumper ( data ) . keep ( lambda d : 'b' in d . keys ()) expected = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, ] assert clump . equals ( expected ) Mutate \u00b6 The mutate verb allows you to add/overwrite data to each item in the collection. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected ) Sort \u00b6 The sort verb allows you to sort the collection based on the values of items. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ()) Select \u00b6 The select verb allows you to select a subset of keys for each item. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ]) Drop \u00b6 The drop verb allows you to remove a subset of keys for each item. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ]) Group By \u00b6 The group_by verb allows you to set a group on a collection based on the values of the keys that you pass. The groups represent subsets and certain verbs will change their behavior if there are groups present. The main use-case for this verb is in combination with .agg() . Base Example \u00b6 from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) Ungroup \u00b6 The ungroup verb will remove any groups currently present. Base Example \u00b6 from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple () Agg \u00b6 The agg verb is short for aggregate. They allow you to summarise the data, keeping in mind any groups that are on it. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min and max . For more information on how they work you can read more info here . Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) Functional Uses \u00b6 You can also pass your own aggregating functions to .agg() . from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : len ( set ( x ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) The results are exactly the same, but being able to pass in a function there might give extra flexibility. Collect \u00b6 When you're done with your data-wrangling you may want to get a basic python list back. That's what .collect() will do for you. Remove Duplicates \u00b6 Removing duplicates is tricky via .keep() so instead we've created a method for this usecase. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected )","title":"Common Verbs"},{"location":"guides/verbs.html#keep","text":"The keep verb allows you to grab a subset from the original collection.","title":"Keep"},{"location":"guides/verbs.html#base-example","text":"Here's a basic example of what keep does. from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected )","title":"Base Example"},{"location":"guides/verbs.html#dropping-missing-values","text":"Libraries like pandas offer verbs like .dropna() . This library does not because we handle missing values differently. If you've got a collection with a missing value then you can simply remove it via .keep() though. from clumper import Clumper data = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, { \"a\" : 4 }, ] clump = Clumper ( data ) . keep ( lambda d : 'b' in d . keys ()) expected = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, ] assert clump . equals ( expected )","title":"Dropping Missing Values"},{"location":"guides/verbs.html#mutate","text":"The mutate verb allows you to add/overwrite data to each item in the collection.","title":"Mutate"},{"location":"guides/verbs.html#base-example_1","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected )","title":"Base Example"},{"location":"guides/verbs.html#sort","text":"The sort verb allows you to sort the collection based on the values of items.","title":"Sort"},{"location":"guides/verbs.html#base-example_2","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ())","title":"Base Example"},{"location":"guides/verbs.html#select","text":"The select verb allows you to select a subset of keys for each item.","title":"Select"},{"location":"guides/verbs.html#base-example_3","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"Base Example"},{"location":"guides/verbs.html#drop","text":"The drop verb allows you to remove a subset of keys for each item.","title":"Drop"},{"location":"guides/verbs.html#base-example_4","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"Base Example"},{"location":"guides/verbs.html#group-by","text":"The group_by verb allows you to set a group on a collection based on the values of the keys that you pass. The groups represent subsets and certain verbs will change their behavior if there are groups present. The main use-case for this verb is in combination with .agg() .","title":"Group By"},{"location":"guides/verbs.html#base-example_5","text":"from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , )","title":"Base Example"},{"location":"guides/verbs.html#ungroup","text":"The ungroup verb will remove any groups currently present.","title":"Ungroup"},{"location":"guides/verbs.html#base-example_6","text":"from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple ()","title":"Base Example"},{"location":"guides/verbs.html#agg","text":"The agg verb is short for aggregate. They allow you to summarise the data, keeping in mind any groups that are on it. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min and max . For more information on how they work you can read more info here .","title":"Agg"},{"location":"guides/verbs.html#base-example_7","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ())","title":"Base Example"},{"location":"guides/verbs.html#functional-uses","text":"You can also pass your own aggregating functions to .agg() . from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : len ( set ( x ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) The results are exactly the same, but being able to pass in a function there might give extra flexibility.","title":"Functional Uses"},{"location":"guides/verbs.html#collect","text":"When you're done with your data-wrangling you may want to get a basic python list back. That's what .collect() will do for you.","title":"Collect"},{"location":"guides/verbs.html#remove-duplicates","text":"Removing duplicates is tricky via .keep() so instead we've created a method for this usecase. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected )","title":"Remove Duplicates"}]}